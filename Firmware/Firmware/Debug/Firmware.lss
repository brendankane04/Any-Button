
Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000316  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000036a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001494  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bf3  00000000  00000000  00001944  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007ea  00000000  00000000  00002537  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b4  00000000  00000000  00002d24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e6  00000000  00000000  00002ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000793  00000000  00000000  000034be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00003c51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	a3 d0       	rcall	.+326    	; 0x172 <main>
  2c:	72 c1       	rjmp	.+740    	; 0x312 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <_ZN6BB_I2CC1Eii>:
#include <avr/io.h>
#include <util/delay.h>
#include "BB_I2C.h"

// default constructor
BB_I2C::BB_I2C(int sda, int scl)
  30:	fc 01       	movw	r30, r24
{
	//Set the pins which the interface is using
	this->SDA = _BV(sda);
  32:	21 e0       	ldi	r18, 0x01	; 1
  34:	30 e0       	ldi	r19, 0x00	; 0
  36:	c9 01       	movw	r24, r18
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	88 0f       	add	r24, r24
  3c:	99 1f       	adc	r25, r25
  3e:	6a 95       	dec	r22
  40:	e2 f7       	brpl	.-8      	; 0x3a <_ZN6BB_I2CC1Eii+0xa>
  42:	bc 01       	movw	r22, r24
  44:	80 83       	st	Z, r24
	this->SCL = _BV(scl);
  46:	02 c0       	rjmp	.+4      	; 0x4c <__SREG__+0xd>
  48:	22 0f       	add	r18, r18
  4a:	33 1f       	adc	r19, r19
  4c:	4a 95       	dec	r20
  4e:	e2 f7       	brpl	.-8      	; 0x48 <__SREG__+0x9>
  50:	21 83       	std	Z+1, r18	; 0x01

	//Set the SDA & SCL pins on PORTB as outputs
	DDRB |= SDA | SCL;
  52:	87 b3       	in	r24, 0x17	; 23
  54:	26 2b       	or	r18, r22
  56:	28 2b       	or	r18, r24
  58:	27 bb       	out	0x17, r18	; 23

	//Set SCL to high
	PORTB |= SCL;
  5a:	98 b3       	in	r25, 0x18	; 24
  5c:	81 81       	ldd	r24, Z+1	; 0x01
  5e:	89 2b       	or	r24, r25
  60:	88 bb       	out	0x18, r24	; 24
  62:	08 95       	ret

00000064 <_ZN11IR_Receiver17wait_until_changeEv>:
#include "IR_Receiver.h"

int IR_Receiver::wait_until_change()
{
	int count = 0;
	GIFR |= _BV(INTF0); //Clear the flag before starting
  64:	8a b7       	in	r24, 0x3a	; 58
  66:	80 64       	ori	r24, 0x40	; 64
  68:	8a bf       	out	0x3a, r24	; 58
#include <util/delay.h>
#include "IR_Receiver.h"

int IR_Receiver::wait_until_change()
{
	int count = 0;
  6a:	80 e0       	ldi	r24, 0x00	; 0
  6c:	90 e0       	ldi	r25, 0x00	; 0
	GIFR |= _BV(INTF0); //Clear the flag before starting
	while((GIFR & _BV(INTF0)) == 0)
  6e:	0a b6       	in	r0, 0x3a	; 58
  70:	06 fc       	sbrc	r0, 6
  72:	06 c0       	rjmp	.+12     	; 0x80 <_ZN11IR_Receiver17wait_until_changeEv+0x1c>
	{
		//Increment
		count++;
  74:	01 96       	adiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  76:	2a e1       	ldi	r18, 0x1A	; 26
  78:	2a 95       	dec	r18
  7a:	f1 f7       	brne	.-4      	; 0x78 <_ZN11IR_Receiver17wait_until_changeEv+0x14>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <_ZN11IR_Receiver17wait_until_changeEv+0x1a>
  7e:	f7 cf       	rjmp	.-18     	; 0x6e <_ZN11IR_Receiver17wait_until_changeEv+0xa>
		_delay_us(10);
	}
	GIFR |= _BV(INTF0); //Clear the flag after its use
  80:	2a b7       	in	r18, 0x3a	; 58
  82:	20 64       	ori	r18, 0x40	; 64
  84:	2a bf       	out	0x3a, r18	; 58
	return count * 10;
  86:	9c 01       	movw	r18, r24
  88:	22 0f       	add	r18, r18
  8a:	33 1f       	adc	r19, r19
  8c:	22 0f       	add	r18, r18
  8e:	33 1f       	adc	r19, r19
  90:	82 0f       	add	r24, r18
  92:	93 1f       	adc	r25, r19
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
}
  98:	08 95       	ret

0000009a <_ZN11IR_Receiver19measure_square_waveEv>:

int IR_Receiver::measure_square_wave()
{
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	ec 01       	movw	r28, r24
	int length;
	wait_until_change();
  a0:	e1 df       	rcall	.-62     	; 0x64 <_ZN11IR_Receiver17wait_until_changeEv>
	length = wait_until_change();
  a2:	ce 01       	movw	r24, r28
  a4:	df df       	rcall	.-66     	; 0x64 <_ZN11IR_Receiver17wait_until_changeEv>
	return length;	
}
  a6:	df 91       	pop	r29
  a8:	cf 91       	pop	r28
  aa:	08 95       	ret

000000ac <_ZN11IR_Receiver8read_bitEv>:

char IR_Receiver::read_bit()
{
	int length;
	length = measure_square_wave();
  ac:	f6 df       	rcall	.-20     	; 0x9a <_ZN11IR_Receiver19measure_square_waveEv>
	if(length < ONE_PULSE)
  ae:	80 3b       	cpi	r24, 0xB0	; 176
  b0:	94 40       	sbci	r25, 0x04	; 4
  b2:	14 f4       	brge	.+4      	; 0xb8 <_ZN11IR_Receiver8read_bitEv+0xc>
		return 0x00;
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	08 95       	ret
	else
		return 0x01;
  b8:	81 e0       	ldi	r24, 0x01	; 1
}
  ba:	08 95       	ret

000000bc <_ZN11IR_Receiver9read_byteEv>:

char IR_Receiver::read_byte()
{
  bc:	ef 92       	push	r14
  be:	ff 92       	push	r15
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	7c 01       	movw	r14, r24
	char output = 0x00;
	for(int i = 0; i < 8; i++)
  c8:	c0 e0       	ldi	r28, 0x00	; 0
  ca:	d0 e0       	ldi	r29, 0x00	; 0
		return 0x01;
}

char IR_Receiver::read_byte()
{
	char output = 0x00;
  cc:	10 e0       	ldi	r17, 0x00	; 0
	for(int i = 0; i < 8; i++)
  ce:	c8 30       	cpi	r28, 0x08	; 8
  d0:	d1 05       	cpc	r29, r1
  d2:	64 f4       	brge	.+24     	; 0xec <_ZN11IR_Receiver9read_byteEv+0x30>
	output |= read_bit() << i;
  d4:	c7 01       	movw	r24, r14
  d6:	ea df       	rcall	.-44     	; 0xac <_ZN11IR_Receiver8read_bitEv>
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0c 2e       	mov	r0, r28
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <_ZN11IR_Receiver9read_byteEv+0x26>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	0a 94       	dec	r0
  e4:	e2 f7       	brpl	.-8      	; 0xde <_ZN11IR_Receiver9read_byteEv+0x22>
  e6:	18 2b       	or	r17, r24
}

char IR_Receiver::read_byte()
{
	char output = 0x00;
	for(int i = 0; i < 8; i++)
  e8:	21 96       	adiw	r28, 0x01	; 1
  ea:	f1 cf       	rjmp	.-30     	; 0xce <_ZN11IR_Receiver9read_byteEv+0x12>
	output |= read_bit() << i;

	return output;
}
  ec:	81 2f       	mov	r24, r17
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	1f 91       	pop	r17
  f4:	ff 90       	pop	r15
  f6:	ef 90       	pop	r14
  f8:	08 95       	ret

000000fa <_ZN11IR_ReceiverC1Ev>:

IR_Receiver::IR_Receiver()
{
	//Set up the interrupt on the INT0 pin to receive the IR signal
	//Initialize the interrupt mode for INT0
	MCUCR |= _BV(ISC00);
  fa:	85 b7       	in	r24, 0x35	; 53
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	85 bf       	out	0x35, r24	; 53
 100:	08 95       	ret

00000102 <_ZN11IR_Receiver4recvEv>:
}

IR_Receiver::IR_cmd IR_Receiver::recv()
{
 102:	ef 92       	push	r14
 104:	ff 92       	push	r15
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	ec 01       	movw	r28, r24
	int length;
	IR_cmd output;
	IR_cmd inv_output;

	//Wait for the beginning of the AGC pulse
	length = measure_square_wave();
 110:	c4 df       	rcall	.-120    	; 0x9a <_ZN11IR_Receiver19measure_square_waveEv>

	//Reject command if nothing the AGC isn't long enough
	if(length < AGC_PULSE)
 112:	8c 34       	cpi	r24, 0x4C	; 76
 114:	9d 41       	sbci	r25, 0x1D	; 29
 116:	1c f4       	brge	.+6      	; 0x11e <_ZN11IR_Receiver4recvEv+0x1c>
	{
		output.addr = 0;
		output.cmd = 0;
		return output;
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	23 c0       	rjmp	.+70     	; 0x164 <_ZN11IR_Receiver4recvEv+0x62>
	}
	
	//Record the length of the pause & set scanning mode from active high to active low
	length = wait_until_change();
 11e:	ce 01       	movw	r24, r28
 120:	a1 df       	rcall	.-190    	; 0x64 <_ZN11IR_Receiver17wait_until_changeEv>

	//Return 0, 0 for repeat commands
	if(length < LONG_PULSE)
 122:	88 3b       	cpi	r24, 0xB8	; 184
 124:	9b 40       	sbci	r25, 0x0B	; 11
 126:	2c f4       	brge	.+10     	; 0x132 <_ZN11IR_Receiver4recvEv+0x30>
	{
		//wait until the stop bit ends
		wait_until_change();
 128:	ce 01       	movw	r24, r28
 12a:	9c df       	rcall	.-200    	; 0x64 <_ZN11IR_Receiver17wait_until_changeEv>

		output.addr = 0;
		output.cmd = 0;
		return output;
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	19 c0       	rjmp	.+50     	; 0x164 <_ZN11IR_Receiver4recvEv+0x62>
	}

	//Read the address
	output.addr = read_byte();
 132:	ce 01       	movw	r24, r28
 134:	c3 df       	rcall	.-122    	; 0xbc <_ZN11IR_Receiver9read_byteEv>
 136:	18 2f       	mov	r17, r24
	
	//Read the inverted address
	inv_output.addr = read_byte();
 138:	ce 01       	movw	r24, r28
 13a:	c0 df       	rcall	.-128    	; 0xbc <_ZN11IR_Receiver9read_byteEv>
 13c:	f8 2e       	mov	r15, r24
	
	//Read the command
	output.cmd = read_byte();
 13e:	ce 01       	movw	r24, r28
 140:	bd df       	rcall	.-134    	; 0xbc <_ZN11IR_Receiver9read_byteEv>
 142:	08 2f       	mov	r16, r24

	//Read the inverted output
	inv_output.cmd = read_byte();
 144:	ce 01       	movw	r24, r28
 146:	ba df       	rcall	.-140    	; 0xbc <_ZN11IR_Receiver9read_byteEv>
 148:	e8 2e       	mov	r14, r24
	
	//Wait until the stop bit ends
	wait_until_change();
 14a:	ce 01       	movw	r24, r28
 14c:	8b df       	rcall	.-234    	; 0x64 <_ZN11IR_Receiver17wait_until_changeEv>

	//Check for error conditions regarding the inverted bits
	if
	(
	output.addr != ((unsigned char) ~inv_output.addr) ||
 14e:	f0 94       	com	r15
	
	//Wait until the stop bit ends
	wait_until_change();

	//Check for error conditions regarding the inverted bits
	if
 150:	1f 11       	cpse	r17, r15
 152:	03 c0       	rjmp	.+6      	; 0x15a <_ZN11IR_Receiver4recvEv+0x58>
	(
	output.addr != ((unsigned char) ~inv_output.addr) ||
	output.cmd != ((unsigned char) ~inv_output.cmd)
 154:	e0 94       	com	r14
	wait_until_change();

	//Check for error conditions regarding the inverted bits
	if
	(
	output.addr != ((unsigned char) ~inv_output.addr) ||
 156:	0e 15       	cp	r16, r14
 158:	19 f0       	breq	.+6      	; 0x160 <_ZN11IR_Receiver4recvEv+0x5e>
	output.cmd != ((unsigned char) ~inv_output.cmd)
	)
	{
		output.addr = 0;
		output.cmd = -1;
		return output;
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	9f ef       	ldi	r25, 0xFF	; 255
 15e:	02 c0       	rjmp	.+4      	; 0x164 <_ZN11IR_Receiver4recvEv+0x62>
	}
	
	return output;
 160:	81 2f       	mov	r24, r17
 162:	90 2f       	mov	r25, r16
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
 16c:	ff 90       	pop	r15
 16e:	ef 90       	pop	r14
 170:	08 95       	ret

00000172 <main>:

#define FALSE 0
#define TRUE  1

int main(void)
{
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	29 97       	sbiw	r28, 0x09	; 9
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	f8 94       	cli
 180:	de bf       	out	0x3e, r29	; 62
 182:	0f be       	out	0x3f, r0	; 63
 184:	cd bf       	out	0x3d, r28	; 61
	IR_Receiver sensor1;
 186:	ce 01       	movw	r24, r28
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	b7 df       	rcall	.-146    	; 0xfa <_ZN11IR_ReceiverC1Ev>
	Relay relay1;
 18c:	ce 01       	movw	r24, r28
 18e:	02 96       	adiw	r24, 0x02	; 2
 190:	3c d0       	rcall	.+120    	; 0x20a <_ZN5RelayC1Ev>
	BB_I2C writer(4, 3);
 192:	43 e0       	ldi	r20, 0x03	; 3
 194:	50 e0       	ldi	r21, 0x00	; 0
 196:	64 e0       	ldi	r22, 0x04	; 4
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	ce 01       	movw	r24, r28
 19c:	08 96       	adiw	r24, 0x08	; 8
 19e:	48 df       	rcall	.-368    	; 0x30 <_ZN6BB_I2CC1Eii>
	//Initialize an empty IR command
	IR_Receiver::IR_cmd remote_cmd;

	while(1)
	{
		remote_cmd = sensor1.recv();
 1a0:	ce 01       	movw	r24, r28
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	ae df       	rcall	.-164    	; 0x102 <_ZN11IR_Receiver4recvEv>
		switch(remote_cmd.cmd)
 1a6:	96 31       	cpi	r25, 0x16	; 22
 1a8:	49 f0       	breq	.+18     	; 0x1bc <main+0x4a>
 1aa:	95 34       	cpi	r25, 0x45	; 69
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <main+0x42>
 1ae:	9c 30       	cpi	r25, 0x0C	; 12
 1b0:	b9 f7       	brne	.-18     	; 0x1a0 <main+0x2e>
 1b2:	0a c0       	rjmp	.+20     	; 0x1c8 <main+0x56>
		{
			case IR_Receiver::POWER:
				relay1.press();
 1b4:	ce 01       	movw	r24, r28
 1b6:	02 96       	adiw	r24, 0x02	; 2
 1b8:	72 d0       	rcall	.+228    	; 0x29e <_ZN5Relay5pressEv>
				break;
 1ba:	f2 cf       	rjmp	.-28     	; 0x1a0 <main+0x2e>
			case IR_Receiver::ZERO:
				relay1.button_set(FALSE);
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	ce 01       	movw	r24, r28
 1c2:	02 96       	adiw	r24, 0x02	; 2
 1c4:	99 d0       	rcall	.+306    	; 0x2f8 <_ZN5Relay10button_setEi>
				break;
 1c6:	ec cf       	rjmp	.-40     	; 0x1a0 <main+0x2e>
			case IR_Receiver::ONE:
				relay1.button_set(TRUE);
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	ce 01       	movw	r24, r28
 1ce:	02 96       	adiw	r24, 0x02	; 2
 1d0:	93 d0       	rcall	.+294    	; 0x2f8 <_ZN5Relay10button_setEi>
				break;
 1d2:	e6 cf       	rjmp	.-52     	; 0x1a0 <main+0x2e>

000001d4 <_ZN5RelayC1Ei>:
Relay::Relay()
{
	Relay(1);
}

Relay::Relay(int pin)
 1d4:	fc 01       	movw	r30, r24
{
	//Initialize the state as off
	state = 0;
 1d6:	11 82       	std	Z+1, r1	; 0x01
 1d8:	10 82       	st	Z, r1
	button_state = 0;
 1da:	13 82       	std	Z+3, r1	; 0x03
 1dc:	12 82       	std	Z+2, r1	; 0x02

	//Ensure the pin is one of the 5 possibilities & set the pin for this relay
	if(0 <= pin && pin <= 5)
 1de:	86 2f       	mov	r24, r22
 1e0:	97 2f       	mov	r25, r23
 1e2:	06 97       	sbiw	r24, 0x06	; 6
 1e4:	18 f4       	brcc	.+6      	; 0x1ec <_ZN5RelayC1Ei+0x18>
	this->pin = pin;
 1e6:	64 83       	std	Z+4, r22	; 0x04
 1e8:	75 83       	std	Z+5, r23	; 0x05
 1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <_ZN5RelayC1Ei+0x20>
	else
	this->pin = 1; //1 is the default pin
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	95 83       	std	Z+5, r25	; 0x05
 1f2:	84 83       	std	Z+4, r24	; 0x04

	//Set the pin as an output
	DDRB |= _BV(pin);
 1f4:	27 b3       	in	r18, 0x17	; 23
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <__DATA_REGION_LENGTH__>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <_ZN5RelayC1Ei+0x28>
 204:	82 2b       	or	r24, r18
 206:	87 bb       	out	0x17, r24	; 23
 208:	08 95       	ret

0000020a <_ZN5RelayC1Ev>:

#define FALSE 0
#define TRUE  1

// default constructor
Relay::Relay()
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	00 d0       	rcall	.+0      	; 0x210 <_ZN5RelayC1Ev+0x6>
 210:	00 d0       	rcall	.+0      	; 0x212 <_ZN5RelayC1Ev+0x8>
 212:	00 d0       	rcall	.+0      	; 0x214 <_ZN5RelayC1Ev+0xa>
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
{
	Relay(1);
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	ce 01       	movw	r24, r28
 21e:	01 96       	adiw	r24, 0x01	; 1
 220:	d9 df       	rcall	.-78     	; 0x1d4 <_ZN5RelayC1Ei>
}
 222:	26 96       	adiw	r28, 0x06	; 6
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	f8 94       	cli
 228:	de bf       	out	0x3e, r29	; 62
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	cd bf       	out	0x3d, r28	; 61
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	08 95       	ret

00000234 <_ZN5Relay6toggleEv>:
	//Set the pin as an output
	DDRB |= _BV(pin);
}

void Relay::toggle()
{
 234:	fc 01       	movw	r30, r24
	if(state)
 236:	80 81       	ld	r24, Z
 238:	91 81       	ldd	r25, Z+1	; 0x01
 23a:	89 2b       	or	r24, r25
 23c:	69 f0       	breq	.+26     	; 0x258 <_ZN5Relay6toggleEv+0x24>
	PORTB &= ~_BV(pin);
 23e:	28 b3       	in	r18, 0x18	; 24
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	04 80       	ldd	r0, Z+4	; 0x04
 246:	02 c0       	rjmp	.+4      	; 0x24c <_ZN5Relay6toggleEv+0x18>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	0a 94       	dec	r0
 24e:	e2 f7       	brpl	.-8      	; 0x248 <_ZN5Relay6toggleEv+0x14>
 250:	80 95       	com	r24
 252:	82 23       	and	r24, r18
 254:	88 bb       	out	0x18, r24	; 24
 256:	0b c0       	rjmp	.+22     	; 0x26e <__stack+0xf>
	else
	PORTB |= _BV(pin);
 258:	28 b3       	in	r18, 0x18	; 24
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	04 80       	ldd	r0, Z+4	; 0x04
 260:	02 c0       	rjmp	.+4      	; 0x266 <__stack+0x7>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	0a 94       	dec	r0
 268:	e2 f7       	brpl	.-8      	; 0x262 <__stack+0x3>
 26a:	82 2b       	or	r24, r18
 26c:	88 bb       	out	0x18, r24	; 24

	state = !state;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	20 81       	ld	r18, Z
 274:	31 81       	ldd	r19, Z+1	; 0x01
 276:	23 2b       	or	r18, r19
 278:	11 f0       	breq	.+4      	; 0x27e <__stack+0x1f>
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	91 83       	std	Z+1, r25	; 0x01
 280:	80 83       	st	Z, r24
 282:	08 95       	ret

00000284 <_ZN5Relay3setEi>:
}

void Relay::set(int input)
{
	input = !!input; //Normalize the input to 1 or 0
 284:	21 e0       	ldi	r18, 0x01	; 1
 286:	67 2b       	or	r22, r23
 288:	09 f4       	brne	.+2      	; 0x28c <_ZN5Relay3setEi+0x8>
 28a:	20 e0       	ldi	r18, 0x00	; 0
 28c:	30 e0       	ldi	r19, 0x00	; 0
	if(input != state) toggle(); //Toggle the pin if the goal & current setting are different
 28e:	fc 01       	movw	r30, r24
 290:	40 81       	ld	r20, Z
 292:	51 81       	ldd	r21, Z+1	; 0x01
 294:	24 17       	cp	r18, r20
 296:	35 07       	cpc	r19, r21
 298:	09 f0       	breq	.+2      	; 0x29c <_ZN5Relay3setEi+0x18>
 29a:	cc df       	rcall	.-104    	; 0x234 <_ZN5Relay6toggleEv>
 29c:	08 95       	ret

0000029e <_ZN5Relay5pressEv>:
}

void Relay::press()
{
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	ec 01       	movw	r28, r24
	set(FALSE);
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	ed df       	rcall	.-38     	; 0x284 <_ZN5Relay3setEi>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2aa:	8f e1       	ldi	r24, 0x1F	; 31
 2ac:	9e e4       	ldi	r25, 0x4E	; 78
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <_ZN5Relay5pressEv+0x10>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <_ZN5Relay5pressEv+0x16>
 2b4:	00 00       	nop
	_delay_ms(10);
	set(TRUE);
 2b6:	61 e0       	ldi	r22, 0x01	; 1
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	ce 01       	movw	r24, r28
 2bc:	e3 df       	rcall	.-58     	; 0x284 <_ZN5Relay3setEi>
 2be:	8f e1       	ldi	r24, 0x1F	; 31
 2c0:	9e e4       	ldi	r25, 0x4E	; 78
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <_ZN5Relay5pressEv+0x24>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <_ZN5Relay5pressEv+0x2a>
 2c8:	00 00       	nop
	_delay_ms(10);
	set(FALSE);
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	ce 01       	movw	r24, r28
 2d0:	d9 df       	rcall	.-78     	; 0x284 <_ZN5Relay3setEi>
 2d2:	8f e1       	ldi	r24, 0x1F	; 31
 2d4:	9e e4       	ldi	r25, 0x4E	; 78
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <_ZN5Relay5pressEv+0x38>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <_ZN5Relay5pressEv+0x3e>
 2dc:	00 00       	nop
	_delay_ms(10);
	
	//Invert the state after being inverted twice
	button_state = !button_state;
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	2a 81       	ldd	r18, Y+2	; 0x02
 2e4:	3b 81       	ldd	r19, Y+3	; 0x03
 2e6:	23 2b       	or	r18, r19
 2e8:	11 f0       	breq	.+4      	; 0x2ee <_ZN5Relay5pressEv+0x50>
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	9b 83       	std	Y+3, r25	; 0x03
 2f0:	8a 83       	std	Y+2, r24	; 0x02
}
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <_ZN5Relay10button_setEi>:

void Relay::button_set(int input)
{
	input = !!input; //Normalize the input to 1 or 0
 2f8:	21 e0       	ldi	r18, 0x01	; 1
 2fa:	67 2b       	or	r22, r23
 2fc:	09 f4       	brne	.+2      	; 0x300 <_ZN5Relay10button_setEi+0x8>
 2fe:	20 e0       	ldi	r18, 0x00	; 0
 300:	30 e0       	ldi	r19, 0x00	; 0
	if(input != button_state) press();
 302:	fc 01       	movw	r30, r24
 304:	42 81       	ldd	r20, Z+2	; 0x02
 306:	53 81       	ldd	r21, Z+3	; 0x03
 308:	24 17       	cp	r18, r20
 30a:	35 07       	cpc	r19, r21
 30c:	09 f0       	breq	.+2      	; 0x310 <_ZN5Relay10button_setEi+0x18>
 30e:	c7 df       	rcall	.-114    	; 0x29e <_ZN5Relay5pressEv>
 310:	08 95       	ret

00000312 <_exit>:
 312:	f8 94       	cli

00000314 <__stop_program>:
 314:	ff cf       	rjmp	.-2      	; 0x314 <__stop_program>
