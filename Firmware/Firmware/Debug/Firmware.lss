
Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000040c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011f8  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b5  00000000  00000000  000016f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005d4  00000000  00000000  00001da9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00002380  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000514  00000000  00000000  000023c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000989  00000000  00000000  000028d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00003261  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	06 d0       	rcall	.+12     	; 0x38 <main>
  2c:	ed c1       	rjmp	.+986    	; 0x408 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <_Z10Write_initv>:
		PORTB &= ~SCL & ~SDA;
		_delay_us(100);
	}

	//Clear data line
	PORTB &= ~SDA;
  30:	87 b3       	in	r24, 0x17	; 23
  32:	88 61       	ori	r24, 0x18	; 24
  34:	87 bb       	out	0x17, r24	; 23
  36:	08 95       	ret

00000038 <main>:
}

int main(void)
{
	Write_init();
  38:	fb df       	rcall	.-10     	; 0x30 <_Z10Write_initv>
		//Constructor
		IR_Receiver()
		{
			//Set up the interrupt on the INT0 pin to receive the IR signal
			//Initialize the interrupt mode for INT0
			MCUCR |= _BV(ISC00); 
  3a:	85 b7       	in	r24, 0x35	; 53
  3c:	81 60       	ori	r24, 0x01	; 1
  3e:	85 bf       	out	0x35, r24	; 53
			//Initialize the state as off
			state = 0;

			//Ensure the pin is one of the 5 possibilities & set the pin for this relay
			if(0 <= pin && pin <= 5) 
				this->pin = pin;
  40:	40 e0       	ldi	r20, 0x00	; 0
  42:	50 e0       	ldi	r21, 0x00	; 0
  44:	61 e0       	ldi	r22, 0x01	; 1
  46:	70 e0       	ldi	r23, 0x00	; 0
			else
				this->pin = 1; //1 is the default pin

			//Set the pin as an output
			DDRB |= _BV(pin);
  48:	87 b3       	in	r24, 0x17	; 23
  4a:	82 60       	ori	r24, 0x02	; 2
  4c:	87 bb       	out	0x17, r24	; 23

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
			GIFR |= _BV(INTF0); //Clear the flag before starting
  4e:	8a b7       	in	r24, 0x3a	; 58
  50:	80 64       	ori	r24, 0x40	; 64
  52:	8a bf       	out	0x3a, r24	; 58
			while((GIFR & _BV(INTF0)) == 0)
  54:	0a b6       	in	r0, 0x3a	; 58
  56:	06 fc       	sbrc	r0, 6
  58:	05 c0       	rjmp	.+10     	; 0x64 <__SREG__+0x25>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5a:	2a e1       	ldi	r18, 0x1A	; 26
  5c:	2a 95       	dec	r18
  5e:	f1 f7       	brne	.-4      	; 0x5c <__SREG__+0x1d>
  60:	00 c0       	rjmp	.+0      	; 0x62 <__SREG__+0x23>
  62:	f8 cf       	rjmp	.-16     	; 0x54 <__SREG__+0x15>
			{
				//Increment
				count++;
				_delay_us(10);
			}
			GIFR |= _BV(INTF0); //Clear the flag after its use
  64:	8a b7       	in	r24, 0x3a	; 58
  66:	80 64       	ori	r24, 0x40	; 64
  68:	8a bf       	out	0x3a, r24	; 58

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
			GIFR |= _BV(INTF0); //Clear the flag before starting
  6a:	8a b7       	in	r24, 0x3a	; 58
  6c:	80 64       	ori	r24, 0x40	; 64
  6e:	8a bf       	out	0x3a, r24	; 58
		static const int ONE_PULSE = 1200;

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
			GIFR |= _BV(INTF0); //Clear the flag before starting
			while((GIFR & _BV(INTF0)) == 0)
  74:	0a b6       	in	r0, 0x3a	; 58
  76:	06 fc       	sbrc	r0, 6
  78:	06 c0       	rjmp	.+12     	; 0x86 <__SREG__+0x47>
			{
				//Increment
				count++;
  7a:	01 96       	adiw	r24, 0x01	; 1
  7c:	3a e1       	ldi	r19, 0x1A	; 26
  7e:	3a 95       	dec	r19
  80:	f1 f7       	brne	.-4      	; 0x7e <__SREG__+0x3f>
  82:	00 c0       	rjmp	.+0      	; 0x84 <__SREG__+0x45>
  84:	f7 cf       	rjmp	.-18     	; 0x74 <__SREG__+0x35>
				_delay_us(10);
			}
			GIFR |= _BV(INTF0); //Clear the flag after its use
  86:	2a b7       	in	r18, 0x3a	; 58
  88:	20 64       	ori	r18, 0x40	; 64
  8a:	2a bf       	out	0x3a, r18	; 58
			return count * 10;
  8c:	9c 01       	movw	r18, r24
  8e:	22 0f       	add	r18, r18
  90:	33 1f       	adc	r19, r19
  92:	22 0f       	add	r18, r18
  94:	33 1f       	adc	r19, r19
  96:	82 0f       	add	r24, r18
  98:	93 1f       	adc	r25, r19
  9a:	88 0f       	add	r24, r24
  9c:	99 1f       	adc	r25, r25

			//Wait for the beginning of the AGC pulse
			length = measure_square_wave();

			//Reject command if nothing the AGC isn't long enough
			if(length < AGC_PULSE)
  9e:	8c 34       	cpi	r24, 0x4C	; 76
  a0:	9d 41       	sbci	r25, 0x1D	; 29
  a2:	14 f4       	brge	.+4      	; 0xa8 <__SREG__+0x69>
			{
				output.addr = 0;
				output.cmd = 0;
				return output;
  a4:	a0 e0       	ldi	r26, 0x00	; 0
  a6:	39 c1       	rjmp	.+626    	; 0x31a <__stack+0xbb>

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
			GIFR |= _BV(INTF0); //Clear the flag before starting
  a8:	8a b7       	in	r24, 0x3a	; 58
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	8a bf       	out	0x3a, r24	; 58
		static const int ONE_PULSE = 1200;

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
			GIFR |= _BV(INTF0); //Clear the flag before starting
			while((GIFR & _BV(INTF0)) == 0)
  b2:	0a b6       	in	r0, 0x3a	; 58
  b4:	06 fc       	sbrc	r0, 6
  b6:	06 c0       	rjmp	.+12     	; 0xc4 <__SREG__+0x85>
			{
				//Increment
				count++;
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	ba e1       	ldi	r27, 0x1A	; 26
  bc:	ba 95       	dec	r27
  be:	f1 f7       	brne	.-4      	; 0xbc <__SREG__+0x7d>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <__SREG__+0x83>
  c2:	f7 cf       	rjmp	.-18     	; 0xb2 <__SREG__+0x73>
				_delay_us(10);
			}
			GIFR |= _BV(INTF0); //Clear the flag after its use
  c4:	2a b7       	in	r18, 0x3a	; 58
  c6:	20 64       	ori	r18, 0x40	; 64
  c8:	2a bf       	out	0x3a, r18	; 58
			return count * 10;
  ca:	9c 01       	movw	r18, r24
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	82 0f       	add	r24, r18
  d6:	93 1f       	adc	r25, r19
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
			
			//Record the length of the pause & set scanning mode from active high to active low
			length = wait_until_change();

			//Return 0, 0 for repeat commands 
			if(length < LONG_PULSE)
  dc:	88 3b       	cpi	r24, 0xB8	; 184
  de:	9b 40       	sbci	r25, 0x0B	; 11
  e0:	84 f4       	brge	.+32     	; 0x102 <__SREG__+0xc3>

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
			GIFR |= _BV(INTF0); //Clear the flag before starting
  e2:	8a b7       	in	r24, 0x3a	; 58
  e4:	80 64       	ori	r24, 0x40	; 64
  e6:	8a bf       	out	0x3a, r24	; 58
			while((GIFR & _BV(INTF0)) == 0)
  e8:	0a b6       	in	r0, 0x3a	; 58
  ea:	06 fc       	sbrc	r0, 6
  ec:	05 c0       	rjmp	.+10     	; 0xf8 <__SREG__+0xb9>
  ee:	3a e1       	ldi	r19, 0x1A	; 26
  f0:	3a 95       	dec	r19
  f2:	f1 f7       	brne	.-4      	; 0xf0 <__SREG__+0xb1>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <__SREG__+0xb7>
  f6:	f8 cf       	rjmp	.-16     	; 0xe8 <__SREG__+0xa9>
			{
				//Increment
				count++;
				_delay_us(10);
			}
			GIFR |= _BV(INTF0); //Clear the flag after its use
  f8:	8a b7       	in	r24, 0x3a	; 58
  fa:	80 64       	ori	r24, 0x40	; 64
  fc:	8a bf       	out	0x3a, r24	; 58
				//wait until the stop bit ends
				wait_until_change();

				output.addr = 0;
				output.cmd = 0;
				return output;
  fe:	a0 e0       	ldi	r26, 0x00	; 0
 100:	0c c1       	rjmp	.+536    	; 0x31a <__stack+0xbb>
			
			//Record the length of the pause & set scanning mode from active high to active low
			length = wait_until_change();

			//Return 0, 0 for repeat commands 
			if(length < LONG_PULSE)
 102:	e0 e0       	ldi	r30, 0x00	; 0
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	20 e0       	ldi	r18, 0x00	; 0

		//Read in a byte from LSB to MSB
		char read_byte()
		{
			char output = 0x00;
			for(int i = 0; i < 8; i++)
 108:	e8 30       	cpi	r30, 0x08	; 8
 10a:	f1 05       	cpc	r31, r1
 10c:	c4 f5       	brge	.+112    	; 0x17e <__SREG__+0x13f>

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
			GIFR |= _BV(INTF0); //Clear the flag before starting
 10e:	8a b7       	in	r24, 0x3a	; 58
 110:	80 64       	ori	r24, 0x40	; 64
 112:	8a bf       	out	0x3a, r24	; 58
			while((GIFR & _BV(INTF0)) == 0)
 114:	0a b6       	in	r0, 0x3a	; 58
 116:	06 fc       	sbrc	r0, 6
 118:	05 c0       	rjmp	.+10     	; 0x124 <__SREG__+0xe5>
 11a:	8a e1       	ldi	r24, 0x1A	; 26
 11c:	8a 95       	dec	r24
 11e:	f1 f7       	brne	.-4      	; 0x11c <__SREG__+0xdd>
 120:	00 c0       	rjmp	.+0      	; 0x122 <__SREG__+0xe3>
 122:	f8 cf       	rjmp	.-16     	; 0x114 <__SREG__+0xd5>
			{
				//Increment
				count++;
				_delay_us(10);
			}
			GIFR |= _BV(INTF0); //Clear the flag after its use
 124:	8a b7       	in	r24, 0x3a	; 58
 126:	80 64       	ori	r24, 0x40	; 64
 128:	8a bf       	out	0x3a, r24	; 58

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
			GIFR |= _BV(INTF0); //Clear the flag before starting
 12a:	8a b7       	in	r24, 0x3a	; 58
 12c:	80 64       	ori	r24, 0x40	; 64
 12e:	8a bf       	out	0x3a, r24	; 58
		static const int ONE_PULSE = 1200;

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
			GIFR |= _BV(INTF0); //Clear the flag before starting
			while((GIFR & _BV(INTF0)) == 0)
 134:	0a b6       	in	r0, 0x3a	; 58
 136:	06 fc       	sbrc	r0, 6
 138:	06 c0       	rjmp	.+12     	; 0x146 <__SREG__+0x107>
			{
				//Increment
				count++;
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	aa e1       	ldi	r26, 0x1A	; 26
 13e:	aa 95       	dec	r26
 140:	f1 f7       	brne	.-4      	; 0x13e <__SREG__+0xff>
 142:	00 c0       	rjmp	.+0      	; 0x144 <__SREG__+0x105>
 144:	f7 cf       	rjmp	.-18     	; 0x134 <__SREG__+0xf5>
				_delay_us(10);
			}
			GIFR |= _BV(INTF0); //Clear the flag after its use
 146:	3a b7       	in	r19, 0x3a	; 58
 148:	30 64       	ori	r19, 0x40	; 64
 14a:	3a bf       	out	0x3a, r19	; 58
			return count * 10;
 14c:	dc 01       	movw	r26, r24
 14e:	aa 0f       	add	r26, r26
 150:	bb 1f       	adc	r27, r27
 152:	aa 0f       	add	r26, r26
 154:	bb 1f       	adc	r27, r27
 156:	8a 0f       	add	r24, r26
 158:	9b 1f       	adc	r25, r27
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
		//Read in a single bit of the IR code based on the length of the square wave
		char read_bit()
		{
			int length;
			length = measure_square_wave();
			if(length < ONE_PULSE)
 15e:	80 3b       	cpi	r24, 0xB0	; 176
 160:	94 40       	sbci	r25, 0x04	; 4
 162:	14 f4       	brge	.+4      	; 0x168 <__SREG__+0x129>
				return 0x00;
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	01 c0       	rjmp	.+2      	; 0x16a <__SREG__+0x12b>
			else
				return 0x01;
 168:	81 e0       	ldi	r24, 0x01	; 1
		//Read in a byte from LSB to MSB
		char read_byte()
		{
			char output = 0x00;
			for(int i = 0; i < 8; i++)
				output |= read_bit() << i;
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 2e       	mov	r0, r30
 16e:	02 c0       	rjmp	.+4      	; 0x174 <__SREG__+0x135>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	0a 94       	dec	r0
 176:	e2 f7       	brpl	.-8      	; 0x170 <__SREG__+0x131>
 178:	28 2b       	or	r18, r24

		//Read in a byte from LSB to MSB
		char read_byte()
		{
			char output = 0x00;
			for(int i = 0; i < 8; i++)
 17a:	31 96       	adiw	r30, 0x01	; 1
 17c:	c5 cf       	rjmp	.-118    	; 0x108 <__SREG__+0xc9>
 17e:	e0 e0       	ldi	r30, 0x00	; 0
 180:	f0 e0       	ldi	r31, 0x00	; 0
		}

		//Read in a byte from LSB to MSB
		char read_byte()
		{
			char output = 0x00;
 182:	30 e0       	ldi	r19, 0x00	; 0
			for(int i = 0; i < 8; i++)
 184:	e8 30       	cpi	r30, 0x08	; 8
 186:	f1 05       	cpc	r31, r1
 188:	c4 f5       	brge	.+112    	; 0x1fa <__SREG__+0x1bb>

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
			GIFR |= _BV(INTF0); //Clear the flag before starting
 18a:	8a b7       	in	r24, 0x3a	; 58
 18c:	80 64       	ori	r24, 0x40	; 64
 18e:	8a bf       	out	0x3a, r24	; 58
			while((GIFR & _BV(INTF0)) == 0)
 190:	0a b6       	in	r0, 0x3a	; 58
 192:	06 fc       	sbrc	r0, 6
 194:	05 c0       	rjmp	.+10     	; 0x1a0 <__SREG__+0x161>
 196:	8a e1       	ldi	r24, 0x1A	; 26
 198:	8a 95       	dec	r24
 19a:	f1 f7       	brne	.-4      	; 0x198 <__SREG__+0x159>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <__SREG__+0x15f>
 19e:	f8 cf       	rjmp	.-16     	; 0x190 <__SREG__+0x151>
			{
				//Increment
				count++;
				_delay_us(10);
			}
			GIFR |= _BV(INTF0); //Clear the flag after its use
 1a0:	8a b7       	in	r24, 0x3a	; 58
 1a2:	80 64       	ori	r24, 0x40	; 64
 1a4:	8a bf       	out	0x3a, r24	; 58

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
			GIFR |= _BV(INTF0); //Clear the flag before starting
 1a6:	8a b7       	in	r24, 0x3a	; 58
 1a8:	80 64       	ori	r24, 0x40	; 64
 1aa:	8a bf       	out	0x3a, r24	; 58
		static const int ONE_PULSE = 1200;

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
			GIFR |= _BV(INTF0); //Clear the flag before starting
			while((GIFR & _BV(INTF0)) == 0)
 1b0:	0a b6       	in	r0, 0x3a	; 58
 1b2:	06 fc       	sbrc	r0, 6
 1b4:	06 c0       	rjmp	.+12     	; 0x1c2 <__SREG__+0x183>
			{
				//Increment
				count++;
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	aa e1       	ldi	r26, 0x1A	; 26
 1ba:	aa 95       	dec	r26
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <__SREG__+0x17b>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <__SREG__+0x181>
 1c0:	f7 cf       	rjmp	.-18     	; 0x1b0 <__SREG__+0x171>
				_delay_us(10);
			}
			GIFR |= _BV(INTF0); //Clear the flag after its use
 1c2:	aa b7       	in	r26, 0x3a	; 58
 1c4:	a0 64       	ori	r26, 0x40	; 64
 1c6:	aa bf       	out	0x3a, r26	; 58
			return count * 10;
 1c8:	dc 01       	movw	r26, r24
 1ca:	aa 0f       	add	r26, r26
 1cc:	bb 1f       	adc	r27, r27
 1ce:	aa 0f       	add	r26, r26
 1d0:	bb 1f       	adc	r27, r27
 1d2:	8a 0f       	add	r24, r26
 1d4:	9b 1f       	adc	r25, r27
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
		//Read in a single bit of the IR code based on the length of the square wave
		char read_bit()
		{
			int length;
			length = measure_square_wave();
			if(length < ONE_PULSE)
 1da:	80 3b       	cpi	r24, 0xB0	; 176
 1dc:	94 40       	sbci	r25, 0x04	; 4
 1de:	14 f4       	brge	.+4      	; 0x1e4 <__SREG__+0x1a5>
				return 0x00;
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <__SREG__+0x1a7>
			else
				return 0x01;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
		//Read in a byte from LSB to MSB
		char read_byte()
		{
			char output = 0x00;
			for(int i = 0; i < 8; i++)
				output |= read_bit() << i;
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 2e       	mov	r0, r30
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__SREG__+0x1b1>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	0a 94       	dec	r0
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <__SREG__+0x1ad>
 1f4:	38 2b       	or	r19, r24

		//Read in a byte from LSB to MSB
		char read_byte()
		{
			char output = 0x00;
			for(int i = 0; i < 8; i++)
 1f6:	31 96       	adiw	r30, 0x01	; 1
 1f8:	c5 cf       	rjmp	.-118    	; 0x184 <__SREG__+0x145>
 1fa:	e0 e0       	ldi	r30, 0x00	; 0
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
		}

		//Read in a byte from LSB to MSB
		char read_byte()
		{
			char output = 0x00;
 1fe:	a0 e0       	ldi	r26, 0x00	; 0
			for(int i = 0; i < 8; i++)
 200:	e8 30       	cpi	r30, 0x08	; 8
 202:	f1 05       	cpc	r31, r1
 204:	c4 f5       	brge	.+112    	; 0x276 <__stack+0x17>

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
			GIFR |= _BV(INTF0); //Clear the flag before starting
 206:	8a b7       	in	r24, 0x3a	; 58
 208:	80 64       	ori	r24, 0x40	; 64
 20a:	8a bf       	out	0x3a, r24	; 58
			while((GIFR & _BV(INTF0)) == 0)
 20c:	0a b6       	in	r0, 0x3a	; 58
 20e:	06 fc       	sbrc	r0, 6
 210:	05 c0       	rjmp	.+10     	; 0x21c <__DATA_REGION_LENGTH__+0x1c>
 212:	8a e1       	ldi	r24, 0x1A	; 26
 214:	8a 95       	dec	r24
 216:	f1 f7       	brne	.-4      	; 0x214 <__DATA_REGION_LENGTH__+0x14>
 218:	00 c0       	rjmp	.+0      	; 0x21a <__DATA_REGION_LENGTH__+0x1a>
 21a:	f8 cf       	rjmp	.-16     	; 0x20c <__DATA_REGION_LENGTH__+0xc>
			{
				//Increment
				count++;
				_delay_us(10);
			}
			GIFR |= _BV(INTF0); //Clear the flag after its use
 21c:	8a b7       	in	r24, 0x3a	; 58
 21e:	80 64       	ori	r24, 0x40	; 64
 220:	8a bf       	out	0x3a, r24	; 58

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
			GIFR |= _BV(INTF0); //Clear the flag before starting
 222:	8a b7       	in	r24, 0x3a	; 58
 224:	80 64       	ori	r24, 0x40	; 64
 226:	8a bf       	out	0x3a, r24	; 58
		static const int ONE_PULSE = 1200;

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
			GIFR |= _BV(INTF0); //Clear the flag before starting
			while((GIFR & _BV(INTF0)) == 0)
 22c:	0a b6       	in	r0, 0x3a	; 58
 22e:	06 fc       	sbrc	r0, 6
 230:	06 c0       	rjmp	.+12     	; 0x23e <__DATA_REGION_LENGTH__+0x3e>
			{
				//Increment
				count++;
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	ba e1       	ldi	r27, 0x1A	; 26
 236:	ba 95       	dec	r27
 238:	f1 f7       	brne	.-4      	; 0x236 <__DATA_REGION_LENGTH__+0x36>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <__DATA_REGION_LENGTH__+0x3c>
 23c:	f7 cf       	rjmp	.-18     	; 0x22c <__DATA_REGION_LENGTH__+0x2c>
				_delay_us(10);
			}
			GIFR |= _BV(INTF0); //Clear the flag after its use
 23e:	ba b7       	in	r27, 0x3a	; 58
 240:	b0 64       	ori	r27, 0x40	; 64
 242:	ba bf       	out	0x3a, r27	; 58
			return count * 10;
 244:	8c 01       	movw	r16, r24
 246:	00 0f       	add	r16, r16
 248:	11 1f       	adc	r17, r17
 24a:	00 0f       	add	r16, r16
 24c:	11 1f       	adc	r17, r17
 24e:	80 0f       	add	r24, r16
 250:	91 1f       	adc	r25, r17
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
		//Read in a single bit of the IR code based on the length of the square wave
		char read_bit()
		{
			int length;
			length = measure_square_wave();
			if(length < ONE_PULSE)
 256:	80 3b       	cpi	r24, 0xB0	; 176
 258:	94 40       	sbci	r25, 0x04	; 4
 25a:	14 f4       	brge	.+4      	; 0x260 <__stack+0x1>
				return 0x00;
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	01 c0       	rjmp	.+2      	; 0x262 <__stack+0x3>
			else
				return 0x01;
 260:	81 e0       	ldi	r24, 0x01	; 1
		//Read in a byte from LSB to MSB
		char read_byte()
		{
			char output = 0x00;
			for(int i = 0; i < 8; i++)
				output |= read_bit() << i;
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 2e       	mov	r0, r30
 266:	02 c0       	rjmp	.+4      	; 0x26c <__stack+0xd>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	0a 94       	dec	r0
 26e:	e2 f7       	brpl	.-8      	; 0x268 <__stack+0x9>
 270:	a8 2b       	or	r26, r24

		//Read in a byte from LSB to MSB
		char read_byte()
		{
			char output = 0x00;
			for(int i = 0; i < 8; i++)
 272:	31 96       	adiw	r30, 0x01	; 1
 274:	c5 cf       	rjmp	.-118    	; 0x200 <__DATA_REGION_LENGTH__>
 276:	e0 e0       	ldi	r30, 0x00	; 0
 278:	f0 e0       	ldi	r31, 0x00	; 0
		}

		//Read in a byte from LSB to MSB
		char read_byte()
		{
			char output = 0x00;
 27a:	c0 e0       	ldi	r28, 0x00	; 0
			for(int i = 0; i < 8; i++)
 27c:	e8 30       	cpi	r30, 0x08	; 8
 27e:	f1 05       	cpc	r31, r1
 280:	c4 f5       	brge	.+112    	; 0x2f2 <__stack+0x93>

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
			GIFR |= _BV(INTF0); //Clear the flag before starting
 282:	8a b7       	in	r24, 0x3a	; 58
 284:	80 64       	ori	r24, 0x40	; 64
 286:	8a bf       	out	0x3a, r24	; 58
			while((GIFR & _BV(INTF0)) == 0)
 288:	0a b6       	in	r0, 0x3a	; 58
 28a:	06 fc       	sbrc	r0, 6
 28c:	05 c0       	rjmp	.+10     	; 0x298 <__stack+0x39>
 28e:	8a e1       	ldi	r24, 0x1A	; 26
 290:	8a 95       	dec	r24
 292:	f1 f7       	brne	.-4      	; 0x290 <__stack+0x31>
 294:	00 c0       	rjmp	.+0      	; 0x296 <__stack+0x37>
 296:	f8 cf       	rjmp	.-16     	; 0x288 <__stack+0x29>
			{
				//Increment
				count++;
				_delay_us(10);
			}
			GIFR |= _BV(INTF0); //Clear the flag after its use
 298:	8a b7       	in	r24, 0x3a	; 58
 29a:	80 64       	ori	r24, 0x40	; 64
 29c:	8a bf       	out	0x3a, r24	; 58

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
			GIFR |= _BV(INTF0); //Clear the flag before starting
 29e:	8a b7       	in	r24, 0x3a	; 58
 2a0:	80 64       	ori	r24, 0x40	; 64
 2a2:	8a bf       	out	0x3a, r24	; 58
		static const int ONE_PULSE = 1200;

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	90 e0       	ldi	r25, 0x00	; 0
			GIFR |= _BV(INTF0); //Clear the flag before starting
			while((GIFR & _BV(INTF0)) == 0)
 2a8:	0a b6       	in	r0, 0x3a	; 58
 2aa:	06 fc       	sbrc	r0, 6
 2ac:	06 c0       	rjmp	.+12     	; 0x2ba <__stack+0x5b>
			{
				//Increment
				count++;
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	ba e1       	ldi	r27, 0x1A	; 26
 2b2:	ba 95       	dec	r27
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <__stack+0x53>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <__stack+0x59>
 2b8:	f7 cf       	rjmp	.-18     	; 0x2a8 <__stack+0x49>
				_delay_us(10);
			}
			GIFR |= _BV(INTF0); //Clear the flag after its use
 2ba:	ba b7       	in	r27, 0x3a	; 58
 2bc:	b0 64       	ori	r27, 0x40	; 64
 2be:	ba bf       	out	0x3a, r27	; 58
			return count * 10;
 2c0:	8c 01       	movw	r16, r24
 2c2:	00 0f       	add	r16, r16
 2c4:	11 1f       	adc	r17, r17
 2c6:	00 0f       	add	r16, r16
 2c8:	11 1f       	adc	r17, r17
 2ca:	80 0f       	add	r24, r16
 2cc:	91 1f       	adc	r25, r17
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
		//Read in a single bit of the IR code based on the length of the square wave
		char read_bit()
		{
			int length;
			length = measure_square_wave();
			if(length < ONE_PULSE)
 2d2:	80 3b       	cpi	r24, 0xB0	; 176
 2d4:	94 40       	sbci	r25, 0x04	; 4
 2d6:	14 f4       	brge	.+4      	; 0x2dc <__stack+0x7d>
				return 0x00;
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	01 c0       	rjmp	.+2      	; 0x2de <__stack+0x7f>
			else
				return 0x01;
 2dc:	81 e0       	ldi	r24, 0x01	; 1
		//Read in a byte from LSB to MSB
		char read_byte()
		{
			char output = 0x00;
			for(int i = 0; i < 8; i++)
				output |= read_bit() << i;
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 2e       	mov	r0, r30
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <__stack+0x89>
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	0a 94       	dec	r0
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <__stack+0x85>
 2ec:	c8 2b       	or	r28, r24

		//Read in a byte from LSB to MSB
		char read_byte()
		{
			char output = 0x00;
			for(int i = 0; i < 8; i++)
 2ee:	31 96       	adiw	r30, 0x01	; 1
 2f0:	c5 cf       	rjmp	.-118    	; 0x27c <__stack+0x1d>

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
			GIFR |= _BV(INTF0); //Clear the flag before starting
 2f2:	8a b7       	in	r24, 0x3a	; 58
 2f4:	80 64       	ori	r24, 0x40	; 64
 2f6:	8a bf       	out	0x3a, r24	; 58
			while((GIFR & _BV(INTF0)) == 0)
 2f8:	0a b6       	in	r0, 0x3a	; 58
 2fa:	06 fc       	sbrc	r0, 6
 2fc:	05 c0       	rjmp	.+10     	; 0x308 <__stack+0xa9>
 2fe:	8a e1       	ldi	r24, 0x1A	; 26
 300:	8a 95       	dec	r24
 302:	f1 f7       	brne	.-4      	; 0x300 <__stack+0xa1>
 304:	00 c0       	rjmp	.+0      	; 0x306 <__stack+0xa7>
 306:	f8 cf       	rjmp	.-16     	; 0x2f8 <__stack+0x99>
			{
				//Increment
				count++;
				_delay_us(10);
			}
			GIFR |= _BV(INTF0); //Clear the flag after its use
 308:	8a b7       	in	r24, 0x3a	; 58
 30a:	80 64       	ori	r24, 0x40	; 64
 30c:	8a bf       	out	0x3a, r24	; 58
			wait_until_change();

			//Check for error conditions regarding the inverted bits
			if
			(
				output.addr != ((unsigned char) ~inv_output.addr) || 
 30e:	30 95       	com	r19
			
			//Wait until the stop bit ends
			wait_until_change();

			//Check for error conditions regarding the inverted bits
			if
 310:	23 13       	cpse	r18, r19
 312:	02 c0       	rjmp	.+4      	; 0x318 <__stack+0xb9>
			(
				output.addr != ((unsigned char) ~inv_output.addr) || 
				output.cmd != ((unsigned char) ~inv_output.cmd) 
 314:	c0 95       	com	r28
			wait_until_change();

			//Check for error conditions regarding the inverted bits
			if
			(
				output.addr != ((unsigned char) ~inv_output.addr) || 
 316:	ac 13       	cpse	r26, r28
				output.cmd != ((unsigned char) ~inv_output.cmd) 
			)
			{
				output.addr = 0;
				output.cmd = -1;
				return output;
 318:	af ef       	ldi	r26, 0xFF	; 255
	remote_cmd.cmd = 0x00;

	while(1)
	{
		remote_cmd = sensor1.recv();
		switch(remote_cmd.cmd)
 31a:	a6 31       	cpi	r26, 0x16	; 22
 31c:	49 f1       	breq	.+82     	; 0x370 <__stack+0x111>
 31e:	a5 34       	cpi	r26, 0x45	; 69
 320:	21 f0       	breq	.+8      	; 0x32a <__stack+0xcb>
 322:	ac 30       	cpi	r26, 0x0C	; 12
 324:	09 f0       	breq	.+2      	; 0x328 <__stack+0xc9>
 326:	93 ce       	rjmp	.-730    	; 0x4e <__SREG__+0xf>
 328:	48 c0       	rjmp	.+144    	; 0x3ba <__stack+0x15b>
			DDRB |= _BV(pin);
		}	

		void toggle()
		{
			if(state)
 32a:	41 15       	cp	r20, r1
 32c:	51 05       	cpc	r21, r1
 32e:	69 f0       	breq	.+26     	; 0x34a <__stack+0xeb>
				PORTB &= ~_BV(pin);
 330:	28 b3       	in	r18, 0x18	; 24
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	06 2e       	mov	r0, r22
 338:	02 c0       	rjmp	.+4      	; 0x33e <__stack+0xdf>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	0a 94       	dec	r0
 340:	e2 f7       	brpl	.-8      	; 0x33a <__stack+0xdb>
 342:	80 95       	com	r24
 344:	82 23       	and	r24, r18
 346:	88 bb       	out	0x18, r24	; 24
 348:	0b c0       	rjmp	.+22     	; 0x360 <__stack+0x101>
			else
				PORTB |= _BV(pin);
 34a:	28 b3       	in	r18, 0x18	; 24
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	06 2e       	mov	r0, r22
 352:	02 c0       	rjmp	.+4      	; 0x358 <__stack+0xf9>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	0a 94       	dec	r0
 35a:	e2 f7       	brpl	.-8      	; 0x354 <__stack+0xf5>
 35c:	82 2b       	or	r24, r18
 35e:	88 bb       	out	0x18, r24	; 24

			state = !state;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	45 2b       	or	r20, r21
 366:	11 f0       	breq	.+4      	; 0x36c <__stack+0x10d>
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	ac 01       	movw	r20, r24
 36e:	6f ce       	rjmp	.-802    	; 0x4e <__SREG__+0xf>
		}

		void set(int input)
		{
			input = !!input; //Normalize the input to 1 or 0
			if(input != state) toggle(); //Toggle the pin if the goal & current setting are different
 370:	ca 01       	movw	r24, r20
 372:	00 97       	sbiw	r24, 0x00	; 0
 374:	09 f4       	brne	.+2      	; 0x378 <__stack+0x119>
 376:	6b ce       	rjmp	.-810    	; 0x4e <__SREG__+0xf>
			DDRB |= _BV(pin);
		}	

		void toggle()
		{
			if(state)
 378:	69 f0       	breq	.+26     	; 0x394 <__stack+0x135>
				PORTB &= ~_BV(pin);
 37a:	28 b3       	in	r18, 0x18	; 24
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	06 2e       	mov	r0, r22
 382:	02 c0       	rjmp	.+4      	; 0x388 <__stack+0x129>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	0a 94       	dec	r0
 38a:	e2 f7       	brpl	.-8      	; 0x384 <__stack+0x125>
 38c:	80 95       	com	r24
 38e:	82 23       	and	r24, r18
 390:	88 bb       	out	0x18, r24	; 24
 392:	0b c0       	rjmp	.+22     	; 0x3aa <__stack+0x14b>
			else
				PORTB |= _BV(pin);
 394:	28 b3       	in	r18, 0x18	; 24
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	06 2e       	mov	r0, r22
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <__stack+0x143>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	0a 94       	dec	r0
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <__stack+0x13f>
 3a6:	82 2b       	or	r24, r18
 3a8:	88 bb       	out	0x18, r24	; 24

			state = !state;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	45 2b       	or	r20, r21
 3b0:	11 f0       	breq	.+4      	; 0x3b6 <__stack+0x157>
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	ac 01       	movw	r20, r24
 3b8:	4a ce       	rjmp	.-876    	; 0x4e <__SREG__+0xf>
		}

		void set(int input)
		{
			input = !!input; //Normalize the input to 1 or 0
			if(input != state) toggle(); //Toggle the pin if the goal & current setting are different
 3ba:	ca 01       	movw	r24, r20
 3bc:	41 30       	cpi	r20, 0x01	; 1
 3be:	51 05       	cpc	r21, r1
 3c0:	09 f4       	brne	.+2      	; 0x3c4 <__stack+0x165>
 3c2:	45 ce       	rjmp	.-886    	; 0x4e <__SREG__+0xf>
			DDRB |= _BV(pin);
		}	

		void toggle()
		{
			if(state)
 3c4:	89 2b       	or	r24, r25
 3c6:	69 f0       	breq	.+26     	; 0x3e2 <__stack+0x183>
				PORTB &= ~_BV(pin);
 3c8:	28 b3       	in	r18, 0x18	; 24
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	06 2e       	mov	r0, r22
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <__stack+0x177>
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	0a 94       	dec	r0
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <__stack+0x173>
 3da:	80 95       	com	r24
 3dc:	82 23       	and	r24, r18
 3de:	88 bb       	out	0x18, r24	; 24
 3e0:	0b c0       	rjmp	.+22     	; 0x3f8 <__stack+0x199>
			else
				PORTB |= _BV(pin);
 3e2:	28 b3       	in	r18, 0x18	; 24
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	06 2e       	mov	r0, r22
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <__stack+0x191>
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	0a 94       	dec	r0
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <__stack+0x18d>
 3f4:	82 2b       	or	r24, r18
 3f6:	88 bb       	out	0x18, r24	; 24

			state = !state;
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	45 2b       	or	r20, r21
 3fe:	11 f0       	breq	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	ac 01       	movw	r20, r24
 406:	23 ce       	rjmp	.-954    	; 0x4e <__SREG__+0xf>

00000408 <_exit>:
 408:	f8 94       	cli

0000040a <__stop_program>:
 40a:	ff cf       	rjmp	.-2      	; 0x40a <__stop_program>
