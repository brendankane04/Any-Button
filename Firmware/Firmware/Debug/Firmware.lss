
Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000224  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000298  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000840  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b7  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c3  00000000  00000000  00001133  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  000014f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ad  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000032c  00000000  00000000  0000190d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001c39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a4 36       	cpi	r26, 0x64	; 100
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	db d0       	rcall	.+438    	; 0x1f2 <main>
  3c:	f1 c0       	rjmp	.+482    	; 0x220 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <_Z5inputi>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  40:	28 b3       	in	r18, 0x18	; 24
  42:	30 e0       	ldi	r19, 0x00	; 0
  44:	a9 01       	movw	r20, r18
  46:	02 c0       	rjmp	.+4      	; 0x4c <_Z5inputi+0xc>
  48:	55 95       	asr	r21
  4a:	47 95       	ror	r20
  4c:	8a 95       	dec	r24
  4e:	e2 f7       	brpl	.-8      	; 0x48 <_Z5inputi+0x8>
  50:	ca 01       	movw	r24, r20
  52:	81 70       	andi	r24, 0x01	; 1
  54:	99 27       	eor	r25, r25
  56:	08 95       	ret

00000058 <_Z15nec_remote_readv>:
	_delay_ms(500);
}

//Reads in the NEC code of an IR receiver
short nec_remote_read()
{
  58:	0f 93       	push	r16
  5a:	1f 93       	push	r17
  5c:	cf 93       	push	r28
  5e:	df 93       	push	r29
	uint8_t count = 0, i = 0;
  60:	c0 e0       	ldi	r28, 0x00	; 0

	// Check 9ms pulse (remote control sends logic high)
	while((input(0) == 0) && (count < 200))
  62:	80 e0       	ldi	r24, 0x00	; 0
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	ec df       	rcall	.-40     	; 0x40 <_Z5inputi>
  68:	89 2b       	or	r24, r25
  6a:	21 f4       	brne	.+8      	; 0x74 <_Z15nec_remote_readv+0x1c>
  6c:	c8 3c       	cpi	r28, 0xC8	; 200
  6e:	20 f0       	brcs	.+8      	; 0x78 <_Z15nec_remote_readv+0x20>
  70:	d0 e0       	ldi	r29, 0x00	; 0
  72:	03 c0       	rjmp	.+6      	; 0x7a <_Z15nec_remote_readv+0x22>
  74:	d0 e0       	ldi	r29, 0x00	; 0
  76:	01 c0       	rjmp	.+2      	; 0x7a <_Z15nec_remote_readv+0x22>
  78:	d1 e0       	ldi	r29, 0x01	; 1
  7a:	dd 23       	and	r29, r29
  7c:	31 f0       	breq	.+12     	; 0x8a <_Z15nec_remote_readv+0x32>
	{
		count++;
  7e:	cf 5f       	subi	r28, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	8a e1       	ldi	r24, 0x1A	; 26
  82:	8a 95       	dec	r24
  84:	f1 f7       	brne	.-4      	; 0x82 <_Z15nec_remote_readv+0x2a>
  86:	00 c0       	rjmp	.+0      	; 0x88 <_Z15nec_remote_readv+0x30>
  88:	ec cf       	rjmp	.-40     	; 0x62 <_Z15nec_remote_readv+0xa>
		_delay_us(50);
	}

	if( (count > 199) || (count < 160))        // NEC protocol?
  8a:	c0 5a       	subi	r28, 0xA0	; 160
  8c:	c8 32       	cpi	r28, 0x28	; 40
  8e:	08 f0       	brcs	.+2      	; 0x92 <_Z15nec_remote_readv+0x3a>
  90:	9d c0       	rjmp	.+314    	; 0x1cc <_Z15nec_remote_readv+0x174>
  92:	c0 e0       	ldi	r28, 0x00	; 0
		return FALSE;

	count = 0;
	// Check 4.5ms space (remote control sends logic low)
	while((input(0)) && (count < 100))
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	d3 df       	rcall	.-90     	; 0x40 <_Z5inputi>
  9a:	89 2b       	or	r24, r25
  9c:	21 f0       	breq	.+8      	; 0xa6 <_Z15nec_remote_readv+0x4e>
  9e:	c4 36       	cpi	r28, 0x64	; 100
  a0:	20 f0       	brcs	.+8      	; 0xaa <_Z15nec_remote_readv+0x52>
  a2:	1d 2f       	mov	r17, r29
  a4:	03 c0       	rjmp	.+6      	; 0xac <_Z15nec_remote_readv+0x54>
  a6:	1d 2f       	mov	r17, r29
  a8:	01 c0       	rjmp	.+2      	; 0xac <_Z15nec_remote_readv+0x54>
  aa:	11 e0       	ldi	r17, 0x01	; 1
  ac:	11 23       	and	r17, r17
  ae:	31 f0       	breq	.+12     	; 0xbc <_Z15nec_remote_readv+0x64>
	{
		count++;
  b0:	cf 5f       	subi	r28, 0xFF	; 255
  b2:	8a e1       	ldi	r24, 0x1A	; 26
  b4:	8a 95       	dec	r24
  b6:	f1 f7       	brne	.-4      	; 0xb4 <_Z15nec_remote_readv+0x5c>
  b8:	00 c0       	rjmp	.+0      	; 0xba <_Z15nec_remote_readv+0x62>
  ba:	ec cf       	rjmp	.-40     	; 0x94 <_Z15nec_remote_readv+0x3c>
		_delay_us(50);
	}

	if( (count > 99) || (count < 60))          // NEC protocol?
  bc:	cc 53       	subi	r28, 0x3C	; 60
  be:	c8 32       	cpi	r28, 0x28	; 40
  c0:	08 f0       	brcs	.+2      	; 0xc4 <_Z15nec_remote_readv+0x6c>
  c2:	87 c0       	rjmp	.+270    	; 0x1d2 <_Z15nec_remote_readv+0x17a>
  c4:	00 e0       	ldi	r16, 0x00	; 0
		return FALSE;

	// Read code message (32-bit)
	for(i = 0; i < 32; i++)
  c6:	00 32       	cpi	r16, 0x20	; 32
  c8:	08 f0       	brcs	.+2      	; 0xcc <_Z15nec_remote_readv+0x74>
  ca:	86 c0       	rjmp	.+268    	; 0x1d8 <_Z15nec_remote_readv+0x180>
  cc:	d0 e0       	ldi	r29, 0x00	; 0
	{
		count = 0;
		while((input(0) == 0) && (count < 14))
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	b6 df       	rcall	.-148    	; 0x40 <_Z5inputi>
  d4:	89 2b       	or	r24, r25
  d6:	21 f4       	brne	.+8      	; 0xe0 <_Z15nec_remote_readv+0x88>
  d8:	de 30       	cpi	r29, 0x0E	; 14
  da:	20 f0       	brcs	.+8      	; 0xe4 <_Z15nec_remote_readv+0x8c>
  dc:	c1 2f       	mov	r28, r17
  de:	03 c0       	rjmp	.+6      	; 0xe6 <_Z15nec_remote_readv+0x8e>
  e0:	c1 2f       	mov	r28, r17
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <_Z15nec_remote_readv+0x8e>
  e4:	c1 e0       	ldi	r28, 0x01	; 1
  e6:	cc 23       	and	r28, r28
  e8:	31 f0       	breq	.+12     	; 0xf6 <_Z15nec_remote_readv+0x9e>
		{
			count++;
  ea:	df 5f       	subi	r29, 0xFF	; 255
  ec:	8a e1       	ldi	r24, 0x1A	; 26
  ee:	8a 95       	dec	r24
  f0:	f1 f7       	brne	.-4      	; 0xee <_Z15nec_remote_readv+0x96>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <_Z15nec_remote_readv+0x9c>
  f4:	ec cf       	rjmp	.-40     	; 0xce <_Z15nec_remote_readv+0x76>
			_delay_us(50);
		}

		if( (count > 13) || (count < 8))      // NEC protocol?
  f6:	d8 50       	subi	r29, 0x08	; 8
  f8:	d6 30       	cpi	r29, 0x06	; 6
  fa:	08 f0       	brcs	.+2      	; 0xfe <_Z15nec_remote_readv+0xa6>
  fc:	70 c0       	rjmp	.+224    	; 0x1de <_Z15nec_remote_readv+0x186>
  fe:	d0 e0       	ldi	r29, 0x00	; 0
			return FALSE;

		count = 0;
		while((input(0)) && (count < 40))
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	9d df       	rcall	.-198    	; 0x40 <_Z5inputi>
 106:	89 2b       	or	r24, r25
 108:	21 f0       	breq	.+8      	; 0x112 <_Z15nec_remote_readv+0xba>
 10a:	d8 32       	cpi	r29, 0x28	; 40
 10c:	20 f0       	brcs	.+8      	; 0x116 <_Z15nec_remote_readv+0xbe>
 10e:	8c 2f       	mov	r24, r28
 110:	03 c0       	rjmp	.+6      	; 0x118 <_Z15nec_remote_readv+0xc0>
 112:	8c 2f       	mov	r24, r28
 114:	01 c0       	rjmp	.+2      	; 0x118 <_Z15nec_remote_readv+0xc0>
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	88 23       	and	r24, r24
 11a:	31 f0       	breq	.+12     	; 0x128 <_Z15nec_remote_readv+0xd0>
		{
			count++;
 11c:	df 5f       	subi	r29, 0xFF	; 255
 11e:	8a e1       	ldi	r24, 0x1A	; 26
 120:	8a 95       	dec	r24
 122:	f1 f7       	brne	.-4      	; 0x120 <_Z15nec_remote_readv+0xc8>
 124:	00 c0       	rjmp	.+0      	; 0x126 <_Z15nec_remote_readv+0xce>
 126:	ec cf       	rjmp	.-40     	; 0x100 <_Z15nec_remote_readv+0xa8>
			_delay_us(50);
		}

		if( (count > 39) || (count < 8))      // NEC protocol?
 128:	88 ef       	ldi	r24, 0xF8	; 248
 12a:	8d 0f       	add	r24, r29
 12c:	80 32       	cpi	r24, 0x20	; 32
 12e:	08 f0       	brcs	.+2      	; 0x132 <_Z15nec_remote_readv+0xda>
 130:	59 c0       	rjmp	.+178    	; 0x1e4 <_Z15nec_remote_readv+0x18c>
			return FALSE;

		if( count > 20)                       // If space width > 1ms
 132:	d5 31       	cpi	r29, 0x15	; 21
 134:	20 f1       	brcs	.+72     	; 0x17e <_Z15nec_remote_readv+0x126>
			//bit_set(ir_code, (31 - i));         // Write 1 to bit (31 - i)
			ir_code |= (1 << (31 - i));
 136:	2f e1       	ldi	r18, 0x1F	; 31
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	20 1b       	sub	r18, r16
 13c:	31 09       	sbc	r19, r1
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <_Z15nec_remote_readv+0xf0>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	2a 95       	dec	r18
 14a:	e2 f7       	brpl	.-8      	; 0x144 <_Z15nec_remote_readv+0xec>
 14c:	09 2e       	mov	r0, r25
 14e:	00 0c       	add	r0, r0
 150:	aa 0b       	sbc	r26, r26
 152:	bb 0b       	sbc	r27, r27
 154:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 158:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 15c:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 160:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 164:	84 2b       	or	r24, r20
 166:	95 2b       	or	r25, r21
 168:	a6 2b       	or	r26, r22
 16a:	b7 2b       	or	r27, r23
 16c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 170:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 174:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 178:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 17c:	25 c0       	rjmp	.+74     	; 0x1c8 <_Z15nec_remote_readv+0x170>
		else                                  // If space width < 1ms
			//bit_clear(ir_code, (31 - i));       // Write 0 to bit (31 - i)
			ir_code &= ~(1 << (31 - i));
 17e:	2f e1       	ldi	r18, 0x1F	; 31
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	20 1b       	sub	r18, r16
 184:	31 09       	sbc	r19, r1
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <_Z15nec_remote_readv+0x138>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	2a 95       	dec	r18
 192:	e2 f7       	brpl	.-8      	; 0x18c <_Z15nec_remote_readv+0x134>
 194:	80 95       	com	r24
 196:	90 95       	com	r25
 198:	09 2e       	mov	r0, r25
 19a:	00 0c       	add	r0, r0
 19c:	aa 0b       	sbc	r26, r26
 19e:	bb 0b       	sbc	r27, r27
 1a0:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a4:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1a8:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1ac:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 1b0:	84 23       	and	r24, r20
 1b2:	95 23       	and	r25, r21
 1b4:	a6 23       	and	r26, r22
 1b6:	b7 23       	and	r27, r23
 1b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1bc:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1c0:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1c4:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>

	if( (count > 99) || (count < 60))          // NEC protocol?
		return FALSE;

	// Read code message (32-bit)
	for(i = 0; i < 32; i++)
 1c8:	0f 5f       	subi	r16, 0xFF	; 255
 1ca:	7d cf       	rjmp	.-262    	; 0xc6 <_Z15nec_remote_readv+0x6e>
		count++;
		_delay_us(50);
	}

	if( (count > 199) || (count < 160))        // NEC protocol?
		return FALSE;
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0b c0       	rjmp	.+22     	; 0x1e8 <_Z15nec_remote_readv+0x190>
		count++;
		_delay_us(50);
	}

	if( (count > 99) || (count < 60))          // NEC protocol?
		return FALSE;
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	08 c0       	rjmp	.+16     	; 0x1e8 <_Z15nec_remote_readv+0x190>
			ir_code |= (1 << (31 - i));
		else                                  // If space width < 1ms
			//bit_clear(ir_code, (31 - i));       // Write 0 to bit (31 - i)
			ir_code &= ~(1 << (31 - i));
	}
	return TRUE;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	05 c0       	rjmp	.+10     	; 0x1e8 <_Z15nec_remote_readv+0x190>
			count++;
			_delay_us(50);
		}

		if( (count > 13) || (count < 8))      // NEC protocol?
			return FALSE;
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <_Z15nec_remote_readv+0x190>
			count++;
			_delay_us(50);
		}

		if( (count > 39) || (count < 8))      // NEC protocol?
			return FALSE;
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
		else                                  // If space width < 1ms
			//bit_clear(ir_code, (31 - i));       // Write 0 to bit (31 - i)
			ir_code &= ~(1 << (31 - i));
	}
	return TRUE;
}
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	1f 91       	pop	r17
 1ee:	0f 91       	pop	r16
 1f0:	08 95       	ret

000001f2 <main>:

int main(void)
{
	DDRB |= PIN(2);
 1f2:	87 b3       	in	r24, 0x17	; 23
 1f4:	84 60       	ori	r24, 0x04	; 4
 1f6:	87 bb       	out	0x17, r24	; 23
    while (1) 
    {
		if(nec_remote_read())
 1f8:	2f df       	rcall	.-418    	; 0x58 <_Z15nec_remote_readv>
 1fa:	89 2b       	or	r24, r25
 1fc:	69 f0       	breq	.+26     	; 0x218 <__DATA_REGION_LENGTH__+0x18>
		{
			PORTB |= PIN(2);
 1fe:	88 b3       	in	r24, 0x18	; 24
 200:	84 60       	ori	r24, 0x04	; 4
 202:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 204:	2f ef       	ldi	r18, 0xFF	; 255
 206:	80 e7       	ldi	r24, 0x70	; 112
 208:	92 e0       	ldi	r25, 0x02	; 2
 20a:	21 50       	subi	r18, 0x01	; 1
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <__DATA_REGION_LENGTH__+0xa>
 212:	00 c0       	rjmp	.+0      	; 0x214 <__DATA_REGION_LENGTH__+0x14>
 214:	00 00       	nop
 216:	f0 cf       	rjmp	.-32     	; 0x1f8 <main+0x6>
			_delay_ms(500);
		}
		else
		{
			PORTB &= ~PIN(2);
 218:	88 b3       	in	r24, 0x18	; 24
 21a:	8b 7f       	andi	r24, 0xFB	; 251
 21c:	88 bb       	out	0x18, r24	; 24
 21e:	ec cf       	rjmp	.-40     	; 0x1f8 <main+0x6>

00000220 <_exit>:
 220:	f8 94       	cli

00000222 <__stop_program>:
 222:	ff cf       	rjmp	.-2      	; 0x222 <__stop_program>
