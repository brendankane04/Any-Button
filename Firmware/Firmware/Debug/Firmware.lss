
Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000040e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000462  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000462  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011f8  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b5  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005db  00000000  00000000  00001dad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00002388  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000514  00000000  00000000  000023cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000989  00000000  00000000  000028e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00003269  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	06 d0       	rcall	.+12     	; 0x38 <main>
  2c:	ee c1       	rjmp	.+988    	; 0x40a <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <_Z10Write_initv>:
		PORTB &= ~SCL & ~SDA;
		_delay_us(100);
	}

	//Clear data line
	PORTB &= ~SDA;
  30:	87 b3       	in	r24, 0x17	; 23
  32:	88 61       	ori	r24, 0x18	; 24
  34:	87 bb       	out	0x17, r24	; 23
  36:	08 95       	ret

00000038 <main>:
}

int main(void)
{
	Write_init();
  38:	fb df       	rcall	.-10     	; 0x30 <_Z10Write_initv>
		//Constructor
		IR_Receiver()
		{
			//Set up the interrupt on the INT0 pin to receive the IR signal
			//Initialize the interrupt mode for INT0
			MCUCR |= _BV(ISC00); 
  3a:	85 b7       	in	r24, 0x35	; 53
  3c:	81 60       	ori	r24, 0x01	; 1
  3e:	85 bf       	out	0x35, r24	; 53
			//Initialize the state as off
			state = 0;

			//Ensure the pin is one of the 5 possibilities & set the pin for this relay
			if(0 <= pin && pin <= 5) 
				this->pin = pin;
  40:	40 e0       	ldi	r20, 0x00	; 0
  42:	50 e0       	ldi	r21, 0x00	; 0
  44:	61 e0       	ldi	r22, 0x01	; 1
  46:	70 e0       	ldi	r23, 0x00	; 0
			else
				this->pin = 1; //1 is the default pin

			//Set the pin as an output
			DDRB |= _BV(pin);
  48:	87 b3       	in	r24, 0x17	; 23
  4a:	82 60       	ori	r24, 0x02	; 2
  4c:	87 bb       	out	0x17, r24	; 23
	//Initialize an empty IR command
	IR_Receiver::IR_cmd remote_cmd;
	remote_cmd.addr = 0x00;
	remote_cmd.cmd = 0x00;

	sei();
  4e:	78 94       	sei

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
			GIFR |= _BV(INTF0); //Clear the flag before starting
  50:	8a b7       	in	r24, 0x3a	; 58
  52:	80 64       	ori	r24, 0x40	; 64
  54:	8a bf       	out	0x3a, r24	; 58
			while((GIFR & _BV(INTF0)) == 0)
  56:	0a b6       	in	r0, 0x3a	; 58
  58:	06 fc       	sbrc	r0, 6
  5a:	05 c0       	rjmp	.+10     	; 0x66 <__SREG__+0x27>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5c:	2a e1       	ldi	r18, 0x1A	; 26
  5e:	2a 95       	dec	r18
  60:	f1 f7       	brne	.-4      	; 0x5e <__SREG__+0x1f>
  62:	00 c0       	rjmp	.+0      	; 0x64 <__SREG__+0x25>
  64:	f8 cf       	rjmp	.-16     	; 0x56 <__SREG__+0x17>
			{
				//Increment
				count++;
				_delay_us(10);
			}
			GIFR |= _BV(INTF0); //Clear the flag after its use
  66:	8a b7       	in	r24, 0x3a	; 58
  68:	80 64       	ori	r24, 0x40	; 64
  6a:	8a bf       	out	0x3a, r24	; 58

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
			GIFR |= _BV(INTF0); //Clear the flag before starting
  6c:	8a b7       	in	r24, 0x3a	; 58
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	8a bf       	out	0x3a, r24	; 58
		static const int ONE_PULSE = 1200;

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
			GIFR |= _BV(INTF0); //Clear the flag before starting
			while((GIFR & _BV(INTF0)) == 0)
  76:	0a b6       	in	r0, 0x3a	; 58
  78:	06 fc       	sbrc	r0, 6
  7a:	06 c0       	rjmp	.+12     	; 0x88 <__SREG__+0x49>
			{
				//Increment
				count++;
  7c:	01 96       	adiw	r24, 0x01	; 1
  7e:	3a e1       	ldi	r19, 0x1A	; 26
  80:	3a 95       	dec	r19
  82:	f1 f7       	brne	.-4      	; 0x80 <__SREG__+0x41>
  84:	00 c0       	rjmp	.+0      	; 0x86 <__SREG__+0x47>
  86:	f7 cf       	rjmp	.-18     	; 0x76 <__SREG__+0x37>
				_delay_us(10);
			}
			GIFR |= _BV(INTF0); //Clear the flag after its use
  88:	2a b7       	in	r18, 0x3a	; 58
  8a:	20 64       	ori	r18, 0x40	; 64
  8c:	2a bf       	out	0x3a, r18	; 58
			return count * 10;
  8e:	9c 01       	movw	r18, r24
  90:	22 0f       	add	r18, r18
  92:	33 1f       	adc	r19, r19
  94:	22 0f       	add	r18, r18
  96:	33 1f       	adc	r19, r19
  98:	82 0f       	add	r24, r18
  9a:	93 1f       	adc	r25, r19
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25

			//Wait for the beginning of the AGC pulse
			length = measure_square_wave();

			//Reject command if nothing the AGC isn't long enough
			if(length < AGC_PULSE)
  a0:	8c 34       	cpi	r24, 0x4C	; 76
  a2:	9d 41       	sbci	r25, 0x1D	; 29
  a4:	14 f4       	brge	.+4      	; 0xaa <__SREG__+0x6b>
			{
				output.addr = 0;
				output.cmd = 0;
				return output;
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	39 c1       	rjmp	.+626    	; 0x31c <__stack+0xbd>

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
			GIFR |= _BV(INTF0); //Clear the flag before starting
  aa:	8a b7       	in	r24, 0x3a	; 58
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	8a bf       	out	0x3a, r24	; 58
		static const int ONE_PULSE = 1200;

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
			GIFR |= _BV(INTF0); //Clear the flag before starting
			while((GIFR & _BV(INTF0)) == 0)
  b4:	0a b6       	in	r0, 0x3a	; 58
  b6:	06 fc       	sbrc	r0, 6
  b8:	06 c0       	rjmp	.+12     	; 0xc6 <__SREG__+0x87>
			{
				//Increment
				count++;
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	ba e1       	ldi	r27, 0x1A	; 26
  be:	ba 95       	dec	r27
  c0:	f1 f7       	brne	.-4      	; 0xbe <__SREG__+0x7f>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <__SREG__+0x85>
  c4:	f7 cf       	rjmp	.-18     	; 0xb4 <__SREG__+0x75>
				_delay_us(10);
			}
			GIFR |= _BV(INTF0); //Clear the flag after its use
  c6:	2a b7       	in	r18, 0x3a	; 58
  c8:	20 64       	ori	r18, 0x40	; 64
  ca:	2a bf       	out	0x3a, r18	; 58
			return count * 10;
  cc:	9c 01       	movw	r18, r24
  ce:	22 0f       	add	r18, r18
  d0:	33 1f       	adc	r19, r19
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	82 0f       	add	r24, r18
  d8:	93 1f       	adc	r25, r19
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
			
			//Record the length of the pause & set scanning mode from active high to active low
			length = wait_until_change();

			//Return 0, 0 for repeat commands 
			if(length < LONG_PULSE)
  de:	88 3b       	cpi	r24, 0xB8	; 184
  e0:	9b 40       	sbci	r25, 0x0B	; 11
  e2:	84 f4       	brge	.+32     	; 0x104 <__SREG__+0xc5>

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
			GIFR |= _BV(INTF0); //Clear the flag before starting
  e4:	8a b7       	in	r24, 0x3a	; 58
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	8a bf       	out	0x3a, r24	; 58
			while((GIFR & _BV(INTF0)) == 0)
  ea:	0a b6       	in	r0, 0x3a	; 58
  ec:	06 fc       	sbrc	r0, 6
  ee:	05 c0       	rjmp	.+10     	; 0xfa <__SREG__+0xbb>
  f0:	3a e1       	ldi	r19, 0x1A	; 26
  f2:	3a 95       	dec	r19
  f4:	f1 f7       	brne	.-4      	; 0xf2 <__SREG__+0xb3>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <__SREG__+0xb9>
  f8:	f8 cf       	rjmp	.-16     	; 0xea <__SREG__+0xab>
			{
				//Increment
				count++;
				_delay_us(10);
			}
			GIFR |= _BV(INTF0); //Clear the flag after its use
  fa:	8a b7       	in	r24, 0x3a	; 58
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	8a bf       	out	0x3a, r24	; 58
				//wait until the stop bit ends
				wait_until_change();

				output.addr = 0;
				output.cmd = 0;
				return output;
 100:	a0 e0       	ldi	r26, 0x00	; 0
 102:	0c c1       	rjmp	.+536    	; 0x31c <__stack+0xbd>
			
			//Record the length of the pause & set scanning mode from active high to active low
			length = wait_until_change();

			//Return 0, 0 for repeat commands 
			if(length < LONG_PULSE)
 104:	e0 e0       	ldi	r30, 0x00	; 0
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	20 e0       	ldi	r18, 0x00	; 0

		//Read in a byte from LSB to MSB
		char read_byte()
		{
			char output = 0x00;
			for(int i = 0; i < 8; i++)
 10a:	e8 30       	cpi	r30, 0x08	; 8
 10c:	f1 05       	cpc	r31, r1
 10e:	c4 f5       	brge	.+112    	; 0x180 <__SREG__+0x141>

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
			GIFR |= _BV(INTF0); //Clear the flag before starting
 110:	8a b7       	in	r24, 0x3a	; 58
 112:	80 64       	ori	r24, 0x40	; 64
 114:	8a bf       	out	0x3a, r24	; 58
			while((GIFR & _BV(INTF0)) == 0)
 116:	0a b6       	in	r0, 0x3a	; 58
 118:	06 fc       	sbrc	r0, 6
 11a:	05 c0       	rjmp	.+10     	; 0x126 <__SREG__+0xe7>
 11c:	8a e1       	ldi	r24, 0x1A	; 26
 11e:	8a 95       	dec	r24
 120:	f1 f7       	brne	.-4      	; 0x11e <__SREG__+0xdf>
 122:	00 c0       	rjmp	.+0      	; 0x124 <__SREG__+0xe5>
 124:	f8 cf       	rjmp	.-16     	; 0x116 <__SREG__+0xd7>
			{
				//Increment
				count++;
				_delay_us(10);
			}
			GIFR |= _BV(INTF0); //Clear the flag after its use
 126:	8a b7       	in	r24, 0x3a	; 58
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	8a bf       	out	0x3a, r24	; 58

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
			GIFR |= _BV(INTF0); //Clear the flag before starting
 12c:	8a b7       	in	r24, 0x3a	; 58
 12e:	80 64       	ori	r24, 0x40	; 64
 130:	8a bf       	out	0x3a, r24	; 58
		static const int ONE_PULSE = 1200;

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	90 e0       	ldi	r25, 0x00	; 0
			GIFR |= _BV(INTF0); //Clear the flag before starting
			while((GIFR & _BV(INTF0)) == 0)
 136:	0a b6       	in	r0, 0x3a	; 58
 138:	06 fc       	sbrc	r0, 6
 13a:	06 c0       	rjmp	.+12     	; 0x148 <__SREG__+0x109>
			{
				//Increment
				count++;
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	aa e1       	ldi	r26, 0x1A	; 26
 140:	aa 95       	dec	r26
 142:	f1 f7       	brne	.-4      	; 0x140 <__SREG__+0x101>
 144:	00 c0       	rjmp	.+0      	; 0x146 <__SREG__+0x107>
 146:	f7 cf       	rjmp	.-18     	; 0x136 <__SREG__+0xf7>
				_delay_us(10);
			}
			GIFR |= _BV(INTF0); //Clear the flag after its use
 148:	3a b7       	in	r19, 0x3a	; 58
 14a:	30 64       	ori	r19, 0x40	; 64
 14c:	3a bf       	out	0x3a, r19	; 58
			return count * 10;
 14e:	dc 01       	movw	r26, r24
 150:	aa 0f       	add	r26, r26
 152:	bb 1f       	adc	r27, r27
 154:	aa 0f       	add	r26, r26
 156:	bb 1f       	adc	r27, r27
 158:	8a 0f       	add	r24, r26
 15a:	9b 1f       	adc	r25, r27
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
		//Read in a single bit of the IR code based on the length of the square wave
		char read_bit()
		{
			int length;
			length = measure_square_wave();
			if(length < ONE_PULSE)
 160:	80 3b       	cpi	r24, 0xB0	; 176
 162:	94 40       	sbci	r25, 0x04	; 4
 164:	14 f4       	brge	.+4      	; 0x16a <__SREG__+0x12b>
				return 0x00;
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	01 c0       	rjmp	.+2      	; 0x16c <__SREG__+0x12d>
			else
				return 0x01;
 16a:	81 e0       	ldi	r24, 0x01	; 1
		//Read in a byte from LSB to MSB
		char read_byte()
		{
			char output = 0x00;
			for(int i = 0; i < 8; i++)
				output |= read_bit() << i;
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 2e       	mov	r0, r30
 170:	02 c0       	rjmp	.+4      	; 0x176 <__SREG__+0x137>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	0a 94       	dec	r0
 178:	e2 f7       	brpl	.-8      	; 0x172 <__SREG__+0x133>
 17a:	28 2b       	or	r18, r24

		//Read in a byte from LSB to MSB
		char read_byte()
		{
			char output = 0x00;
			for(int i = 0; i < 8; i++)
 17c:	31 96       	adiw	r30, 0x01	; 1
 17e:	c5 cf       	rjmp	.-118    	; 0x10a <__SREG__+0xcb>
 180:	e0 e0       	ldi	r30, 0x00	; 0
 182:	f0 e0       	ldi	r31, 0x00	; 0
		}

		//Read in a byte from LSB to MSB
		char read_byte()
		{
			char output = 0x00;
 184:	30 e0       	ldi	r19, 0x00	; 0
			for(int i = 0; i < 8; i++)
 186:	e8 30       	cpi	r30, 0x08	; 8
 188:	f1 05       	cpc	r31, r1
 18a:	c4 f5       	brge	.+112    	; 0x1fc <__SREG__+0x1bd>

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
			GIFR |= _BV(INTF0); //Clear the flag before starting
 18c:	8a b7       	in	r24, 0x3a	; 58
 18e:	80 64       	ori	r24, 0x40	; 64
 190:	8a bf       	out	0x3a, r24	; 58
			while((GIFR & _BV(INTF0)) == 0)
 192:	0a b6       	in	r0, 0x3a	; 58
 194:	06 fc       	sbrc	r0, 6
 196:	05 c0       	rjmp	.+10     	; 0x1a2 <__SREG__+0x163>
 198:	8a e1       	ldi	r24, 0x1A	; 26
 19a:	8a 95       	dec	r24
 19c:	f1 f7       	brne	.-4      	; 0x19a <__SREG__+0x15b>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <__SREG__+0x161>
 1a0:	f8 cf       	rjmp	.-16     	; 0x192 <__SREG__+0x153>
			{
				//Increment
				count++;
				_delay_us(10);
			}
			GIFR |= _BV(INTF0); //Clear the flag after its use
 1a2:	8a b7       	in	r24, 0x3a	; 58
 1a4:	80 64       	ori	r24, 0x40	; 64
 1a6:	8a bf       	out	0x3a, r24	; 58

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
			GIFR |= _BV(INTF0); //Clear the flag before starting
 1a8:	8a b7       	in	r24, 0x3a	; 58
 1aa:	80 64       	ori	r24, 0x40	; 64
 1ac:	8a bf       	out	0x3a, r24	; 58
		static const int ONE_PULSE = 1200;

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
			GIFR |= _BV(INTF0); //Clear the flag before starting
			while((GIFR & _BV(INTF0)) == 0)
 1b2:	0a b6       	in	r0, 0x3a	; 58
 1b4:	06 fc       	sbrc	r0, 6
 1b6:	06 c0       	rjmp	.+12     	; 0x1c4 <__SREG__+0x185>
			{
				//Increment
				count++;
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	aa e1       	ldi	r26, 0x1A	; 26
 1bc:	aa 95       	dec	r26
 1be:	f1 f7       	brne	.-4      	; 0x1bc <__SREG__+0x17d>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <__SREG__+0x183>
 1c2:	f7 cf       	rjmp	.-18     	; 0x1b2 <__SREG__+0x173>
				_delay_us(10);
			}
			GIFR |= _BV(INTF0); //Clear the flag after its use
 1c4:	aa b7       	in	r26, 0x3a	; 58
 1c6:	a0 64       	ori	r26, 0x40	; 64
 1c8:	aa bf       	out	0x3a, r26	; 58
			return count * 10;
 1ca:	dc 01       	movw	r26, r24
 1cc:	aa 0f       	add	r26, r26
 1ce:	bb 1f       	adc	r27, r27
 1d0:	aa 0f       	add	r26, r26
 1d2:	bb 1f       	adc	r27, r27
 1d4:	8a 0f       	add	r24, r26
 1d6:	9b 1f       	adc	r25, r27
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
		//Read in a single bit of the IR code based on the length of the square wave
		char read_bit()
		{
			int length;
			length = measure_square_wave();
			if(length < ONE_PULSE)
 1dc:	80 3b       	cpi	r24, 0xB0	; 176
 1de:	94 40       	sbci	r25, 0x04	; 4
 1e0:	14 f4       	brge	.+4      	; 0x1e6 <__SREG__+0x1a7>
				return 0x00;
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <__SREG__+0x1a9>
			else
				return 0x01;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
		//Read in a byte from LSB to MSB
		char read_byte()
		{
			char output = 0x00;
			for(int i = 0; i < 8; i++)
				output |= read_bit() << i;
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 2e       	mov	r0, r30
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <__SREG__+0x1b3>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	0a 94       	dec	r0
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <__SREG__+0x1af>
 1f6:	38 2b       	or	r19, r24

		//Read in a byte from LSB to MSB
		char read_byte()
		{
			char output = 0x00;
			for(int i = 0; i < 8; i++)
 1f8:	31 96       	adiw	r30, 0x01	; 1
 1fa:	c5 cf       	rjmp	.-118    	; 0x186 <__SREG__+0x147>
 1fc:	e0 e0       	ldi	r30, 0x00	; 0
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
		}

		//Read in a byte from LSB to MSB
		char read_byte()
		{
			char output = 0x00;
 200:	a0 e0       	ldi	r26, 0x00	; 0
			for(int i = 0; i < 8; i++)
 202:	e8 30       	cpi	r30, 0x08	; 8
 204:	f1 05       	cpc	r31, r1
 206:	c4 f5       	brge	.+112    	; 0x278 <__stack+0x19>

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
			GIFR |= _BV(INTF0); //Clear the flag before starting
 208:	8a b7       	in	r24, 0x3a	; 58
 20a:	80 64       	ori	r24, 0x40	; 64
 20c:	8a bf       	out	0x3a, r24	; 58
			while((GIFR & _BV(INTF0)) == 0)
 20e:	0a b6       	in	r0, 0x3a	; 58
 210:	06 fc       	sbrc	r0, 6
 212:	05 c0       	rjmp	.+10     	; 0x21e <__DATA_REGION_LENGTH__+0x1e>
 214:	8a e1       	ldi	r24, 0x1A	; 26
 216:	8a 95       	dec	r24
 218:	f1 f7       	brne	.-4      	; 0x216 <__DATA_REGION_LENGTH__+0x16>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <__DATA_REGION_LENGTH__+0x1c>
 21c:	f8 cf       	rjmp	.-16     	; 0x20e <__DATA_REGION_LENGTH__+0xe>
			{
				//Increment
				count++;
				_delay_us(10);
			}
			GIFR |= _BV(INTF0); //Clear the flag after its use
 21e:	8a b7       	in	r24, 0x3a	; 58
 220:	80 64       	ori	r24, 0x40	; 64
 222:	8a bf       	out	0x3a, r24	; 58

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
			GIFR |= _BV(INTF0); //Clear the flag before starting
 224:	8a b7       	in	r24, 0x3a	; 58
 226:	80 64       	ori	r24, 0x40	; 64
 228:	8a bf       	out	0x3a, r24	; 58
		static const int ONE_PULSE = 1200;

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
			GIFR |= _BV(INTF0); //Clear the flag before starting
			while((GIFR & _BV(INTF0)) == 0)
 22e:	0a b6       	in	r0, 0x3a	; 58
 230:	06 fc       	sbrc	r0, 6
 232:	06 c0       	rjmp	.+12     	; 0x240 <__DATA_REGION_LENGTH__+0x40>
			{
				//Increment
				count++;
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	ba e1       	ldi	r27, 0x1A	; 26
 238:	ba 95       	dec	r27
 23a:	f1 f7       	brne	.-4      	; 0x238 <__DATA_REGION_LENGTH__+0x38>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <__DATA_REGION_LENGTH__+0x3e>
 23e:	f7 cf       	rjmp	.-18     	; 0x22e <__DATA_REGION_LENGTH__+0x2e>
				_delay_us(10);
			}
			GIFR |= _BV(INTF0); //Clear the flag after its use
 240:	ba b7       	in	r27, 0x3a	; 58
 242:	b0 64       	ori	r27, 0x40	; 64
 244:	ba bf       	out	0x3a, r27	; 58
			return count * 10;
 246:	8c 01       	movw	r16, r24
 248:	00 0f       	add	r16, r16
 24a:	11 1f       	adc	r17, r17
 24c:	00 0f       	add	r16, r16
 24e:	11 1f       	adc	r17, r17
 250:	80 0f       	add	r24, r16
 252:	91 1f       	adc	r25, r17
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
		//Read in a single bit of the IR code based on the length of the square wave
		char read_bit()
		{
			int length;
			length = measure_square_wave();
			if(length < ONE_PULSE)
 258:	80 3b       	cpi	r24, 0xB0	; 176
 25a:	94 40       	sbci	r25, 0x04	; 4
 25c:	14 f4       	brge	.+4      	; 0x262 <__stack+0x3>
				return 0x00;
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	01 c0       	rjmp	.+2      	; 0x264 <__stack+0x5>
			else
				return 0x01;
 262:	81 e0       	ldi	r24, 0x01	; 1
		//Read in a byte from LSB to MSB
		char read_byte()
		{
			char output = 0x00;
			for(int i = 0; i < 8; i++)
				output |= read_bit() << i;
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 2e       	mov	r0, r30
 268:	02 c0       	rjmp	.+4      	; 0x26e <__stack+0xf>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	0a 94       	dec	r0
 270:	e2 f7       	brpl	.-8      	; 0x26a <__stack+0xb>
 272:	a8 2b       	or	r26, r24

		//Read in a byte from LSB to MSB
		char read_byte()
		{
			char output = 0x00;
			for(int i = 0; i < 8; i++)
 274:	31 96       	adiw	r30, 0x01	; 1
 276:	c5 cf       	rjmp	.-118    	; 0x202 <__DATA_REGION_LENGTH__+0x2>
 278:	e0 e0       	ldi	r30, 0x00	; 0
 27a:	f0 e0       	ldi	r31, 0x00	; 0
		}

		//Read in a byte from LSB to MSB
		char read_byte()
		{
			char output = 0x00;
 27c:	c0 e0       	ldi	r28, 0x00	; 0
			for(int i = 0; i < 8; i++)
 27e:	e8 30       	cpi	r30, 0x08	; 8
 280:	f1 05       	cpc	r31, r1
 282:	c4 f5       	brge	.+112    	; 0x2f4 <__stack+0x95>

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
			GIFR |= _BV(INTF0); //Clear the flag before starting
 284:	8a b7       	in	r24, 0x3a	; 58
 286:	80 64       	ori	r24, 0x40	; 64
 288:	8a bf       	out	0x3a, r24	; 58
			while((GIFR & _BV(INTF0)) == 0)
 28a:	0a b6       	in	r0, 0x3a	; 58
 28c:	06 fc       	sbrc	r0, 6
 28e:	05 c0       	rjmp	.+10     	; 0x29a <__stack+0x3b>
 290:	8a e1       	ldi	r24, 0x1A	; 26
 292:	8a 95       	dec	r24
 294:	f1 f7       	brne	.-4      	; 0x292 <__stack+0x33>
 296:	00 c0       	rjmp	.+0      	; 0x298 <__stack+0x39>
 298:	f8 cf       	rjmp	.-16     	; 0x28a <__stack+0x2b>
			{
				//Increment
				count++;
				_delay_us(10);
			}
			GIFR |= _BV(INTF0); //Clear the flag after its use
 29a:	8a b7       	in	r24, 0x3a	; 58
 29c:	80 64       	ori	r24, 0x40	; 64
 29e:	8a bf       	out	0x3a, r24	; 58

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
			GIFR |= _BV(INTF0); //Clear the flag before starting
 2a0:	8a b7       	in	r24, 0x3a	; 58
 2a2:	80 64       	ori	r24, 0x40	; 64
 2a4:	8a bf       	out	0x3a, r24	; 58
		static const int ONE_PULSE = 1200;

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	90 e0       	ldi	r25, 0x00	; 0
			GIFR |= _BV(INTF0); //Clear the flag before starting
			while((GIFR & _BV(INTF0)) == 0)
 2aa:	0a b6       	in	r0, 0x3a	; 58
 2ac:	06 fc       	sbrc	r0, 6
 2ae:	06 c0       	rjmp	.+12     	; 0x2bc <__stack+0x5d>
			{
				//Increment
				count++;
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	ba e1       	ldi	r27, 0x1A	; 26
 2b4:	ba 95       	dec	r27
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <__stack+0x55>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <__stack+0x5b>
 2ba:	f7 cf       	rjmp	.-18     	; 0x2aa <__stack+0x4b>
				_delay_us(10);
			}
			GIFR |= _BV(INTF0); //Clear the flag after its use
 2bc:	ba b7       	in	r27, 0x3a	; 58
 2be:	b0 64       	ori	r27, 0x40	; 64
 2c0:	ba bf       	out	0x3a, r27	; 58
			return count * 10;
 2c2:	8c 01       	movw	r16, r24
 2c4:	00 0f       	add	r16, r16
 2c6:	11 1f       	adc	r17, r17
 2c8:	00 0f       	add	r16, r16
 2ca:	11 1f       	adc	r17, r17
 2cc:	80 0f       	add	r24, r16
 2ce:	91 1f       	adc	r25, r17
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
		//Read in a single bit of the IR code based on the length of the square wave
		char read_bit()
		{
			int length;
			length = measure_square_wave();
			if(length < ONE_PULSE)
 2d4:	80 3b       	cpi	r24, 0xB0	; 176
 2d6:	94 40       	sbci	r25, 0x04	; 4
 2d8:	14 f4       	brge	.+4      	; 0x2de <__stack+0x7f>
				return 0x00;
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <__stack+0x81>
			else
				return 0x01;
 2de:	81 e0       	ldi	r24, 0x01	; 1
		//Read in a byte from LSB to MSB
		char read_byte()
		{
			char output = 0x00;
			for(int i = 0; i < 8; i++)
				output |= read_bit() << i;
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 2e       	mov	r0, r30
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <__stack+0x8b>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	0a 94       	dec	r0
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <__stack+0x87>
 2ee:	c8 2b       	or	r28, r24

		//Read in a byte from LSB to MSB
		char read_byte()
		{
			char output = 0x00;
			for(int i = 0; i < 8; i++)
 2f0:	31 96       	adiw	r30, 0x01	; 1
 2f2:	c5 cf       	rjmp	.-118    	; 0x27e <__stack+0x1f>

		//waits until the interrupt pin is triggered to continue and records how long the device waited for a response in microseconds
		int wait_until_change()
		{
			int count = 0;
			GIFR |= _BV(INTF0); //Clear the flag before starting
 2f4:	8a b7       	in	r24, 0x3a	; 58
 2f6:	80 64       	ori	r24, 0x40	; 64
 2f8:	8a bf       	out	0x3a, r24	; 58
			while((GIFR & _BV(INTF0)) == 0)
 2fa:	0a b6       	in	r0, 0x3a	; 58
 2fc:	06 fc       	sbrc	r0, 6
 2fe:	05 c0       	rjmp	.+10     	; 0x30a <__stack+0xab>
 300:	8a e1       	ldi	r24, 0x1A	; 26
 302:	8a 95       	dec	r24
 304:	f1 f7       	brne	.-4      	; 0x302 <__stack+0xa3>
 306:	00 c0       	rjmp	.+0      	; 0x308 <__stack+0xa9>
 308:	f8 cf       	rjmp	.-16     	; 0x2fa <__stack+0x9b>
			{
				//Increment
				count++;
				_delay_us(10);
			}
			GIFR |= _BV(INTF0); //Clear the flag after its use
 30a:	8a b7       	in	r24, 0x3a	; 58
 30c:	80 64       	ori	r24, 0x40	; 64
 30e:	8a bf       	out	0x3a, r24	; 58
			wait_until_change();

			//Check for error conditions regarding the inverted bits
			if
			(
				output.addr != ((unsigned char) ~inv_output.addr) || 
 310:	30 95       	com	r19
			
			//Wait until the stop bit ends
			wait_until_change();

			//Check for error conditions regarding the inverted bits
			if
 312:	23 13       	cpse	r18, r19
 314:	02 c0       	rjmp	.+4      	; 0x31a <__stack+0xbb>
			(
				output.addr != ((unsigned char) ~inv_output.addr) || 
				output.cmd != ((unsigned char) ~inv_output.cmd) 
 316:	c0 95       	com	r28
			wait_until_change();

			//Check for error conditions regarding the inverted bits
			if
			(
				output.addr != ((unsigned char) ~inv_output.addr) || 
 318:	ac 13       	cpse	r26, r28
				output.cmd != ((unsigned char) ~inv_output.cmd) 
			)
			{
				output.addr = 0;
				output.cmd = -1;
				return output;
 31a:	af ef       	ldi	r26, 0xFF	; 255
	sei();

	while(1)
	{
		remote_cmd = sensor1.recv();
		switch(remote_cmd.cmd)
 31c:	a6 31       	cpi	r26, 0x16	; 22
 31e:	49 f1       	breq	.+82     	; 0x372 <__stack+0x113>
 320:	a5 34       	cpi	r26, 0x45	; 69
 322:	21 f0       	breq	.+8      	; 0x32c <__stack+0xcd>
 324:	ac 30       	cpi	r26, 0x0C	; 12
 326:	09 f0       	breq	.+2      	; 0x32a <__stack+0xcb>
 328:	93 ce       	rjmp	.-730    	; 0x50 <__SREG__+0x11>
 32a:	48 c0       	rjmp	.+144    	; 0x3bc <__stack+0x15d>
			DDRB |= _BV(pin);
		}	

		void toggle()
		{
			if(state)
 32c:	41 15       	cp	r20, r1
 32e:	51 05       	cpc	r21, r1
 330:	69 f0       	breq	.+26     	; 0x34c <__stack+0xed>
				PORTB &= ~_BV(pin);
 332:	28 b3       	in	r18, 0x18	; 24
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	06 2e       	mov	r0, r22
 33a:	02 c0       	rjmp	.+4      	; 0x340 <__stack+0xe1>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <__stack+0xdd>
 344:	80 95       	com	r24
 346:	82 23       	and	r24, r18
 348:	88 bb       	out	0x18, r24	; 24
 34a:	0b c0       	rjmp	.+22     	; 0x362 <__stack+0x103>
			else
				PORTB |= _BV(pin);
 34c:	28 b3       	in	r18, 0x18	; 24
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	06 2e       	mov	r0, r22
 354:	02 c0       	rjmp	.+4      	; 0x35a <__stack+0xfb>
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	0a 94       	dec	r0
 35c:	e2 f7       	brpl	.-8      	; 0x356 <__stack+0xf7>
 35e:	82 2b       	or	r24, r18
 360:	88 bb       	out	0x18, r24	; 24

			state = !state;
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	45 2b       	or	r20, r21
 368:	11 f0       	breq	.+4      	; 0x36e <__stack+0x10f>
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	ac 01       	movw	r20, r24
 370:	6f ce       	rjmp	.-802    	; 0x50 <__SREG__+0x11>
		}

		void set(int input)
		{
			input = !!input; //Normalize the input to 1 or 0
			if(input != state) toggle(); //Toggle the pin if the goal & current setting are different
 372:	ca 01       	movw	r24, r20
 374:	00 97       	sbiw	r24, 0x00	; 0
 376:	09 f4       	brne	.+2      	; 0x37a <__stack+0x11b>
 378:	6b ce       	rjmp	.-810    	; 0x50 <__SREG__+0x11>
			DDRB |= _BV(pin);
		}	

		void toggle()
		{
			if(state)
 37a:	69 f0       	breq	.+26     	; 0x396 <__stack+0x137>
				PORTB &= ~_BV(pin);
 37c:	28 b3       	in	r18, 0x18	; 24
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	06 2e       	mov	r0, r22
 384:	02 c0       	rjmp	.+4      	; 0x38a <__stack+0x12b>
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	0a 94       	dec	r0
 38c:	e2 f7       	brpl	.-8      	; 0x386 <__stack+0x127>
 38e:	80 95       	com	r24
 390:	82 23       	and	r24, r18
 392:	88 bb       	out	0x18, r24	; 24
 394:	0b c0       	rjmp	.+22     	; 0x3ac <__stack+0x14d>
			else
				PORTB |= _BV(pin);
 396:	28 b3       	in	r18, 0x18	; 24
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	06 2e       	mov	r0, r22
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <__stack+0x145>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	0a 94       	dec	r0
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <__stack+0x141>
 3a8:	82 2b       	or	r24, r18
 3aa:	88 bb       	out	0x18, r24	; 24

			state = !state;
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	45 2b       	or	r20, r21
 3b2:	11 f0       	breq	.+4      	; 0x3b8 <__stack+0x159>
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	ac 01       	movw	r20, r24
 3ba:	4a ce       	rjmp	.-876    	; 0x50 <__SREG__+0x11>
		}

		void set(int input)
		{
			input = !!input; //Normalize the input to 1 or 0
			if(input != state) toggle(); //Toggle the pin if the goal & current setting are different
 3bc:	ca 01       	movw	r24, r20
 3be:	41 30       	cpi	r20, 0x01	; 1
 3c0:	51 05       	cpc	r21, r1
 3c2:	09 f4       	brne	.+2      	; 0x3c6 <__stack+0x167>
 3c4:	45 ce       	rjmp	.-886    	; 0x50 <__SREG__+0x11>
			DDRB |= _BV(pin);
		}	

		void toggle()
		{
			if(state)
 3c6:	89 2b       	or	r24, r25
 3c8:	69 f0       	breq	.+26     	; 0x3e4 <__stack+0x185>
				PORTB &= ~_BV(pin);
 3ca:	28 b3       	in	r18, 0x18	; 24
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	06 2e       	mov	r0, r22
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <__stack+0x179>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	0a 94       	dec	r0
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <__stack+0x175>
 3dc:	80 95       	com	r24
 3de:	82 23       	and	r24, r18
 3e0:	88 bb       	out	0x18, r24	; 24
 3e2:	0b c0       	rjmp	.+22     	; 0x3fa <__stack+0x19b>
			else
				PORTB |= _BV(pin);
 3e4:	28 b3       	in	r18, 0x18	; 24
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	06 2e       	mov	r0, r22
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <__stack+0x193>
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	0a 94       	dec	r0
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <__stack+0x18f>
 3f6:	82 2b       	or	r24, r18
 3f8:	88 bb       	out	0x18, r24	; 24

			state = !state;
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	45 2b       	or	r20, r21
 400:	11 f0       	breq	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	ac 01       	movw	r20, r24
 408:	23 ce       	rjmp	.-954    	; 0x50 <__SREG__+0x11>

0000040a <_exit>:
 40a:	f8 94       	cli

0000040c <__stop_program>:
 40c:	ff cf       	rjmp	.-2      	; 0x40c <__stop_program>
