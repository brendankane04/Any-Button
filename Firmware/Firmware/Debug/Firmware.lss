
Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000007ac  00000840  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  00800062  00800062  00000842  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000842  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000874  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bae  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076d  00000000  00000000  000014d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000071e  00000000  00000000  00001c43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00002364  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064e  00000000  00000000  000024a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004c4  00000000  00000000  00002aee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002fb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	0d c1       	rjmp	.+538    	; 0x21e <__vector_1>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	02 c2       	rjmp	.+1028   	; 0x410 <__vector_5>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ec ea       	ldi	r30, 0xAC	; 172
  32:	f7 e0       	ldi	r31, 0x07	; 7
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a2 36       	cpi	r26, 0x62	; 98
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a2 e6       	ldi	r26, 0x62	; 98
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ac 38       	cpi	r26, 0x8C	; 140
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	02 d2       	rcall	.+1028   	; 0x456 <main>
  52:	aa c3       	rjmp	.+1876   	; 0x7a8 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <_ZL11repDisabledh>:
			}
			
			break;
		}
	}
}
  56:	90 e0       	ldi	r25, 0x00	; 0
  58:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <_ZL15repDisCmdsCount>
  5c:	92 17       	cp	r25, r18
  5e:	58 f4       	brcc	.+22     	; 0x76 <_ZL11repDisabledh+0x20>
  60:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <_ZL10repDisCmds>
  64:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <_ZL10repDisCmds+0x1>
  68:	e9 0f       	add	r30, r25
  6a:	f1 1d       	adc	r31, r1
  6c:	20 81       	ld	r18, Z
  6e:	28 17       	cp	r18, r24
  70:	21 f0       	breq	.+8      	; 0x7a <_ZL11repDisabledh+0x24>
  72:	9f 5f       	subi	r25, 0xFF	; 255
  74:	f1 cf       	rjmp	.-30     	; 0x58 <_ZL11repDisabledh+0x2>
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	08 95       	ret
  7a:	81 e0       	ldi	r24, 0x01	; 1
  7c:	08 95       	ret

0000007e <_ZL10write_dataP7IR_dataS0_>:
  7e:	cf 93       	push	r28
  80:	df 93       	push	r29
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	28 97       	sbiw	r28, 0x08	; 8
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	f8 94       	cli
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	0f be       	out	0x3f, r0	; 63
  90:	cd bf       	out	0x3d, r28	; 61
  92:	9a 83       	std	Y+2, r25	; 0x02
  94:	89 83       	std	Y+1, r24	; 0x01
  96:	7c 83       	std	Y+4, r23	; 0x04
  98:	6b 83       	std	Y+3, r22	; 0x03
  9a:	01 96       	adiw	r24, 0x01	; 1
  9c:	9e 83       	std	Y+6, r25	; 0x06
  9e:	8d 83       	std	Y+5, r24	; 0x05
  a0:	6f 5f       	subi	r22, 0xFF	; 255
  a2:	7f 4f       	sbci	r23, 0xFF	; 255
  a4:	78 87       	std	Y+8, r23	; 0x08
  a6:	6f 83       	std	Y+7, r22	; 0x07
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	34 30       	cpi	r19, 0x04	; 4
  ac:	08 f0       	brcs	.+2      	; 0xb0 <_ZL10write_dataP7IR_dataS0_+0x32>
  ae:	46 c0       	rjmp	.+140    	; 0x13c <_ZL10write_dataP7IR_dataS0_+0xbe>
  b0:	20 e0       	ldi	r18, 0x00	; 0
  b2:	28 30       	cpi	r18, 0x08	; 8
  b4:	08 f0       	brcs	.+2      	; 0xb8 <_ZL10write_dataP7IR_dataS0_+0x3a>
  b6:	40 c0       	rjmp	.+128    	; 0x138 <_ZL10write_dataP7IR_dataS0_+0xba>
  b8:	83 2f       	mov	r24, r19
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	fc 01       	movw	r30, r24
  be:	ee 0f       	add	r30, r30
  c0:	ff 1f       	adc	r31, r31
  c2:	ee 0f       	add	r30, r30
  c4:	ff 1f       	adc	r31, r31
  c6:	ee 0f       	add	r30, r30
  c8:	ff 1f       	adc	r31, r31
  ca:	e2 0f       	add	r30, r18
  cc:	f1 1d       	adc	r31, r1
  ce:	ea 59       	subi	r30, 0x9A	; 154
  d0:	ff 4f       	sbci	r31, 0xFF	; 255
  d2:	40 81       	ld	r20, Z
  d4:	44 23       	and	r20, r20
  d6:	b9 f0       	breq	.+46     	; 0x106 <_ZL10write_dataP7IR_dataS0_+0x88>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	e1 e0       	ldi	r30, 0x01	; 1
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	ec 0f       	add	r30, r28
  e2:	fd 1f       	adc	r31, r29
  e4:	e8 0f       	add	r30, r24
  e6:	f9 1f       	adc	r31, r25
  e8:	01 90       	ld	r0, Z+
  ea:	f0 81       	ld	r31, Z
  ec:	e0 2d       	mov	r30, r0
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 2e       	mov	r0, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <_ZL10write_dataP7IR_dataS0_+0x7c>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <_ZL10write_dataP7IR_dataS0_+0x78>
  fe:	90 81       	ld	r25, Z
 100:	89 2b       	or	r24, r25
 102:	80 83       	st	Z, r24
 104:	17 c0       	rjmp	.+46     	; 0x134 <_ZL10write_dataP7IR_dataS0_+0xb6>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	e1 e0       	ldi	r30, 0x01	; 1
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	ec 0f       	add	r30, r28
 110:	fd 1f       	adc	r31, r29
 112:	e8 0f       	add	r30, r24
 114:	f9 1f       	adc	r31, r25
 116:	01 90       	ld	r0, Z+
 118:	f0 81       	ld	r31, Z
 11a:	e0 2d       	mov	r30, r0
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 2e       	mov	r0, r18
 122:	02 c0       	rjmp	.+4      	; 0x128 <_ZL10write_dataP7IR_dataS0_+0xaa>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <_ZL10write_dataP7IR_dataS0_+0xa6>
 12c:	80 95       	com	r24
 12e:	90 81       	ld	r25, Z
 130:	89 23       	and	r24, r25
 132:	80 83       	st	Z, r24
 134:	2f 5f       	subi	r18, 0xFF	; 255
 136:	bd cf       	rjmp	.-134    	; 0xb2 <_ZL10write_dataP7IR_dataS0_+0x34>
 138:	3f 5f       	subi	r19, 0xFF	; 255
 13a:	b7 cf       	rjmp	.-146    	; 0xaa <_ZL10write_dataP7IR_dataS0_+0x2c>
 13c:	28 96       	adiw	r28, 0x08	; 8
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	f8 94       	cli
 142:	de bf       	out	0x3e, r29	; 62
 144:	0f be       	out	0x3f, r0	; 63
 146:	cd bf       	out	0x3d, r28	; 61
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <_Z7IR_initm>:
 14e:	ab 01       	movw	r20, r22
 150:	bc 01       	movw	r22, r24
 152:	83 b7       	in	r24, 0x33	; 51
 154:	85 60       	ori	r24, 0x05	; 5
 156:	83 bf       	out	0x33, r24	; 51
 158:	85 b7       	in	r24, 0x35	; 53
 15a:	81 60       	ori	r24, 0x01	; 1
 15c:	85 bf       	out	0x35, r24	; 53
 15e:	8b b7       	in	r24, 0x3b	; 59
 160:	80 64       	ori	r24, 0x40	; 64
 162:	8b bf       	out	0x3b, r24	; 59
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	80 32       	cpi	r24, 0x20	; 32
 168:	38 f4       	brcc	.+14     	; 0x178 <_Z7IR_initm+0x2a>
 16a:	e8 2f       	mov	r30, r24
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	ea 59       	subi	r30, 0x9A	; 154
 170:	ff 4f       	sbci	r31, 0xFF	; 255
 172:	10 82       	st	Z, r1
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	f7 cf       	rjmp	.-18     	; 0x166 <_Z7IR_initm+0x18>
 178:	44 38       	cpi	r20, 0x84	; 132
 17a:	51 05       	cpc	r21, r1
 17c:	61 05       	cpc	r22, r1
 17e:	71 05       	cpc	r23, r1
 180:	20 f4       	brcc	.+8      	; 0x18a <_Z7IR_initm+0x3c>
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <_ZL11ovfsTimeout>
 188:	08 95       	ret
 18a:	cb 01       	movw	r24, r22
 18c:	ba 01       	movw	r22, r20
 18e:	7e d2       	rcall	.+1276   	; 0x68c <__floatunsisf>
 190:	2f e6       	ldi	r18, 0x6F	; 111
 192:	32 e1       	ldi	r19, 0x12	; 18
 194:	43 e0       	ldi	r20, 0x03	; 3
 196:	52 e4       	ldi	r21, 0x42	; 66
 198:	e5 d1       	rcall	.+970    	; 0x564 <__divsf3>
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	40 e8       	ldi	r20, 0x80	; 128
 1a0:	5f e3       	ldi	r21, 0x3F	; 63
 1a2:	7c d1       	rcall	.+760    	; 0x49c <__addsf3>
 1a4:	47 d2       	rcall	.+1166   	; 0x634 <__fixunssfsi>
 1a6:	60 93 89 00 	sts	0x0089, r22	; 0x800089 <_ZL11ovfsTimeout>
 1aa:	08 95       	ret

000001ac <_Z13IR_data_readyv>:

/* ---------------------------------------------------------------------- */

bool IR_data_ready()
{
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	00 d0       	rcall	.+0      	; 0x1b2 <_Z13IR_data_readyv+0x6>
 1b2:	00 d0       	rcall	.+0      	; 0x1b4 <_Z13IR_data_readyv+0x8>
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
	// New IR data
	IR_data newIRData;
	// New inverted IR data
	IR_data newInvIRData;
		
	switch(bufferState)
 1b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1bc:	88 23       	and	r24, r24
 1be:	21 f0       	breq	.+8      	; 0x1c8 <_Z13IR_data_readyv+0x1c>
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	29 f1       	breq	.+74     	; 0x20e <__DATA_REGION_LENGTH__+0xe>

/* ---------------------------------------------------------------------- */

bool IR_data_ready()
{
	bool dataReadyFlag = false;
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	24 c0       	rjmp	.+72     	; 0x210 <__DATA_REGION_LENGTH__+0x10>
		
	switch(bufferState)
	{
		case BUF_READY:
		// Write data from the pulse buffer to new IR data structures
		write_data(&newIRData, &newInvIRData);
 1c8:	be 01       	movw	r22, r28
 1ca:	6d 5f       	subi	r22, 0xFD	; 253
 1cc:	7f 4f       	sbci	r23, 0xFF	; 255
 1ce:	ce 01       	movw	r24, r28
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	55 df       	rcall	.-342    	; 0x7e <_ZL10write_dataP7IR_dataS0_>
			
		if ((newIRData.address ^ newInvIRData.address) != 0xFF || (newIRData.command ^ newInvIRData.command) != 0xFF)
 1d4:	99 81       	ldd	r25, Y+1	; 0x01
 1d6:	8b 81       	ldd	r24, Y+3	; 0x03
 1d8:	89 27       	eor	r24, r25
 1da:	8f 3f       	cpi	r24, 0xFF	; 255
 1dc:	29 f4       	brne	.+10     	; 0x1e8 <_Z13IR_data_readyv+0x3c>
 1de:	8a 81       	ldd	r24, Y+2	; 0x02
 1e0:	2c 81       	ldd	r18, Y+4	; 0x04
 1e2:	28 27       	eor	r18, r24
 1e4:	2f 3f       	cpi	r18, 0xFF	; 255
 1e6:	29 f0       	breq	.+10     	; 0x1f2 <_Z13IR_data_readyv+0x46>
		{
			/* Address or command inversion error */

			dataReadyFlag = false;
			bufferState = BUF_NOT_READY;
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			
		if ((newIRData.address ^ newInvIRData.address) != 0xFF || (newIRData.command ^ newInvIRData.command) != 0xFF)
		{
			/* Address or command inversion error */

			dataReadyFlag = false;
 1ee:	80 e0       	ldi	r24, 0x00	; 0
			bufferState = BUF_NOT_READY;
			break;
 1f0:	0f c0       	rjmp	.+30     	; 0x210 <__DATA_REGION_LENGTH__+0x10>
		else
		{
			/* Address and command inversion successful */

			// Store IR data to the globally accessible variable
			IR.address = newIRData.address;
 1f2:	ea e8       	ldi	r30, 0x8A	; 138
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	90 83       	st	Z, r25
			IR.command = newIRData.command;
 1f8:	81 83       	std	Z+1, r24	; 0x01
			
			dataReadyFlag = true;
			bufferState = repDisabled(IR.command) ? BUF_NOT_READY : BUF_REPEAT;
 1fa:	2d df       	rcall	.-422    	; 0x56 <_ZL11repDisabledh>
 1fc:	88 23       	and	r24, r24
 1fe:	11 f0       	breq	.+4      	; 0x204 <__DATA_REGION_LENGTH__+0x4>
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	01 c0       	rjmp	.+2      	; 0x206 <__DATA_REGION_LENGTH__+0x6>
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

			// Store IR data to the globally accessible variable
			IR.address = newIRData.address;
			IR.command = newIRData.command;
			
			dataReadyFlag = true;
 20a:	81 e0       	ldi	r24, 0x01	; 1
			bufferState = repDisabled(IR.command) ? BUF_NOT_READY : BUF_REPEAT;
		}
		break;
 20c:	01 c0       	rjmp	.+2      	; 0x210 <__DATA_REGION_LENGTH__+0x10>
			
		case BUF_REPEAT:
		dataReadyFlag = true;
 20e:	81 e0       	ldi	r24, 0x01	; 1
		dataReadyFlag = false;
		break;
	}
	
	return dataReadyFlag;
}
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	0f 90       	pop	r0
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <__vector_1>:

/* ---------------------------------------------------------------------- */

// External interrupt (IR signal capture)
ISR(INT0_vect)
{
 21e:	1f 92       	push	r1
 220:	0f 92       	push	r0
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	0f 92       	push	r0
 226:	11 24       	eor	r1, r1
 228:	4f 93       	push	r20
 22a:	5f 93       	push	r21
 22c:	6f 93       	push	r22
 22e:	7f 93       	push	r23
 230:	8f 93       	push	r24
 232:	9f 93       	push	r25
 234:	ef 93       	push	r30
 236:	ff 93       	push	r31
	uint32_t capturedPulse = TICK * TCNT0;
 238:	42 b7       	in	r20, 0x32	; 50
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	56 95       	lsr	r21
 23e:	54 2f       	mov	r21, r20
 240:	44 27       	eor	r20, r20
 242:	57 95       	ror	r21
 244:	47 95       	ror	r20
 246:	05 2e       	mov	r0, r21
 248:	00 0c       	add	r0, r0
 24a:	66 0b       	sbc	r22, r22
 24c:	77 0b       	sbc	r23, r23
	// Pulse (HIGH) -> true, space (LOW) -> false
	uint8_t pulseLevel = (IR_RCV_PIN_REG & _BV(IR_RCV_PIN)) >> IR_RCV_PIN;
 24e:	86 b3       	in	r24, 0x16	; 22
 250:	84 70       	andi	r24, 0x04	; 4
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	95 95       	asr	r25
 256:	87 95       	ror	r24
 258:	95 95       	asr	r25
 25a:	87 95       	ror	r24
	// Bool to determine pulse buffer state in final pulse state
	static bool repeatCode = false;
		
	switch (captureState)
 25c:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <_ZL12captureState>
 260:	92 30       	cpi	r25, 0x02	; 2
 262:	a1 f1       	breq	.+104    	; 0x2cc <__stack+0x6d>
 264:	28 f4       	brcc	.+10     	; 0x270 <__stack+0x11>
 266:	99 23       	and	r25, r25
 268:	51 f0       	breq	.+20     	; 0x27e <__stack+0x1f>
 26a:	91 30       	cpi	r25, 0x01	; 1
 26c:	c1 f0       	breq	.+48     	; 0x29e <__stack+0x3f>
 26e:	c2 c0       	rjmp	.+388    	; 0x3f4 <__stack+0x195>
 270:	93 30       	cpi	r25, 0x03	; 3
 272:	09 f4       	brne	.+2      	; 0x276 <__stack+0x17>
 274:	5b c0       	rjmp	.+182    	; 0x32c <__stack+0xcd>
 276:	94 30       	cpi	r25, 0x04	; 4
 278:	09 f4       	brne	.+2      	; 0x27c <__stack+0x1d>
 27a:	a1 c0       	rjmp	.+322    	; 0x3be <__stack+0x15f>
 27c:	bb c0       	rjmp	.+374    	; 0x3f4 <__stack+0x195>
	{
		// Waiting for next data
		case WAIT_STATE:
		if (!pulseLevel)
 27e:	81 11       	cpse	r24, r1
 280:	0a c0       	rjmp	.+20     	; 0x296 <__stack+0x37>
		{
			captureState = LEADING_PULSE_STATE;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_ZL12captureState>
			#if defined(__AVR_ATtiny85__)
			// Clear overflow interrupt flag
			TIFR |= _BV(TOV0);
 288:	88 b7       	in	r24, 0x38	; 56
 28a:	82 60       	ori	r24, 0x02	; 2
 28c:	88 bf       	out	0x38, r24	; 56
			// Enable overflow interrupt for Timer/Counter0
			TIMSK |= _BV(TOIE0);
 28e:	89 b7       	in	r24, 0x39	; 57
 290:	82 60       	ori	r24, 0x02	; 2
 292:	89 bf       	out	0x39, r24	; 57
 294:	af c0       	rjmp	.+350    	; 0x3f4 <__stack+0x195>
			TIMSK0 |= _BV(TOIE0);
			#endif
		}
		else
		{
			bufferState = BUF_NOT_READY;
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 29c:	ab c0       	rjmp	.+342    	; 0x3f4 <__stack+0x195>
		}
		break;
			
		// Leading pulse
		case LEADING_PULSE_STATE:
		if (pulseLevel && capturedPulse >= lowPulseThrs[LEADING_PULSE] && capturedPulse <= upPulseThrs[LEADING_PULSE])
 29e:	88 23       	and	r24, r24
 2a0:	79 f0       	breq	.+30     	; 0x2c0 <__stack+0x61>
 2a2:	46 37       	cpi	r20, 0x76	; 118
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	58 07       	cpc	r21, r24
 2a8:	61 05       	cpc	r22, r1
 2aa:	71 05       	cpc	r23, r1
 2ac:	48 f0       	brcs	.+18     	; 0x2c0 <__stack+0x61>
 2ae:	43 39       	cpi	r20, 0x93	; 147
 2b0:	54 40       	sbci	r21, 0x04	; 4
 2b2:	61 05       	cpc	r22, r1
 2b4:	71 05       	cpc	r23, r1
 2b6:	20 f4       	brcc	.+8      	; 0x2c0 <__stack+0x61>
		{
			captureState = LEADING_SPACE_STATE;
 2b8:	82 e0       	ldi	r24, 0x02	; 2
 2ba:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_ZL12captureState>
 2be:	9a c0       	rjmp	.+308    	; 0x3f4 <__stack+0x195>
		}
		else
		{
			bufferState = BUF_NOT_READY;
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			captureState = WAIT_STATE;
 2c6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <_ZL12captureState>
 2ca:	94 c0       	rjmp	.+296    	; 0x3f4 <__stack+0x195>
		}
		break;
			
		// Initial space or repeat space
		case LEADING_SPACE_STATE:
		if (!pulseLevel && capturedPulse >= lowPulseThrs[INITIAL_SPACE] && capturedPulse <= upPulseThrs[INITIAL_SPACE])
 2cc:	81 11       	cpse	r24, r1
 2ce:	14 c0       	rjmp	.+40     	; 0x2f8 <__stack+0x99>
 2d0:	42 3c       	cpi	r20, 0xC2	; 194
 2d2:	9b e0       	ldi	r25, 0x0B	; 11
 2d4:	59 07       	cpc	r21, r25
 2d6:	61 05       	cpc	r22, r1
 2d8:	71 05       	cpc	r23, r1
 2da:	70 f0       	brcs	.+28     	; 0x2f8 <__stack+0x99>
 2dc:	47 3d       	cpi	r20, 0xD7	; 215
 2de:	95 e1       	ldi	r25, 0x15	; 21
 2e0:	59 07       	cpc	r21, r25
 2e2:	61 05       	cpc	r22, r1
 2e4:	71 05       	cpc	r23, r1
 2e6:	40 f4       	brcc	.+16     	; 0x2f8 <__stack+0x99>
		{
			captureState = DATA_STATE;
 2e8:	83 e0       	ldi	r24, 0x03	; 3
 2ea:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_ZL12captureState>
			repeatCode = false;
 2ee:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
			bufferIndex = 0;
 2f2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <_ZL11bufferIndex>
 2f6:	7e c0       	rjmp	.+252    	; 0x3f4 <__stack+0x195>
		}
		else if (!pulseLevel && capturedPulse >= lowPulseThrs[REPEAT_SPACE] && capturedPulse <= upPulseThrs[REPEAT_SPACE])
 2f8:	81 11       	cpse	r24, r1
 2fa:	12 c0       	rjmp	.+36     	; 0x320 <__stack+0xc1>
 2fc:	47 32       	cpi	r20, 0x27	; 39
 2fe:	86 e0       	ldi	r24, 0x06	; 6
 300:	58 07       	cpc	r21, r24
 302:	61 05       	cpc	r22, r1
 304:	71 05       	cpc	r23, r1
 306:	60 f0       	brcs	.+24     	; 0x320 <__stack+0xc1>
 308:	4e 36       	cpi	r20, 0x6E	; 110
 30a:	5b 40       	sbci	r21, 0x0B	; 11
 30c:	61 05       	cpc	r22, r1
 30e:	71 05       	cpc	r23, r1
 310:	38 f4       	brcc	.+14     	; 0x320 <__stack+0xc1>
		{
			captureState = FINAL_PULSE_STATE;
 312:	84 e0       	ldi	r24, 0x04	; 4
 314:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_ZL12captureState>
			repeatCode = true;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 31e:	6a c0       	rjmp	.+212    	; 0x3f4 <__stack+0x195>
		}
		else
		{
			bufferState = BUF_NOT_READY;
 320:	82 e0       	ldi	r24, 0x02	; 2
 322:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			captureState = WAIT_STATE;
 326:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <_ZL12captureState>
 32a:	64 c0       	rjmp	.+200    	; 0x3f4 <__stack+0x195>
		break;
			
		// 8-bit address
		case DATA_STATE:
		// Short pulse or space
		if (!pulseLevel && capturedPulse >= lowPulseThrs[LOGIC_SHORT] && capturedPulse <= upPulseThrs[LOGIC_SHORT])
 32c:	81 11       	cpse	r24, r1
 32e:	1f c0       	rjmp	.+62     	; 0x36e <__stack+0x10f>
 330:	48 31       	cpi	r20, 0x18	; 24
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	59 07       	cpc	r21, r25
 336:	61 05       	cpc	r22, r1
 338:	71 05       	cpc	r23, r1
 33a:	c8 f0       	brcs	.+50     	; 0x36e <__stack+0x10f>
 33c:	49 30       	cpi	r20, 0x09	; 9
 33e:	92 e0       	ldi	r25, 0x02	; 2
 340:	59 07       	cpc	r21, r25
 342:	61 05       	cpc	r22, r1
 344:	71 05       	cpc	r23, r1
 346:	98 f4       	brcc	.+38     	; 0x36e <__stack+0x10f>
		{
			pulseBuffer[bufferIndex++] = false;
 348:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <_ZL11bufferIndex>
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	8e 0f       	add	r24, r30
 350:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <_ZL11bufferIndex>
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	ea 59       	subi	r30, 0x9A	; 154
 358:	ff 4f       	sbci	r31, 0xFF	; 255
 35a:	10 82       	st	Z, r1

			if (bufferIndex >= BUFFER_SIZE)
 35c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <_ZL11bufferIndex>
 360:	80 32       	cpi	r24, 0x20	; 32
 362:	08 f4       	brcc	.+2      	; 0x366 <__stack+0x107>
 364:	47 c0       	rjmp	.+142    	; 0x3f4 <__stack+0x195>
			{
				captureState = FINAL_PULSE_STATE;
 366:	84 e0       	ldi	r24, 0x04	; 4
 368:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_ZL12captureState>
 36c:	43 c0       	rjmp	.+134    	; 0x3f4 <__stack+0x195>
			}
		}
		// Long space
		else if (!pulseLevel && capturedPulse >= lowPulseThrs[LOGIC_LONG] && capturedPulse <= upPulseThrs[LOGIC_LONG])
 36e:	81 11       	cpse	r24, r1
 370:	1e c0       	rjmp	.+60     	; 0x3ae <__stack+0x14f>
 372:	4a 3e       	cpi	r20, 0xEA	; 234
 374:	91 e0       	ldi	r25, 0x01	; 1
 376:	59 07       	cpc	r21, r25
 378:	61 05       	cpc	r22, r1
 37a:	71 05       	cpc	r23, r1
 37c:	c0 f0       	brcs	.+48     	; 0x3ae <__stack+0x14f>
 37e:	4e 38       	cpi	r20, 0x8E	; 142
 380:	53 40       	sbci	r21, 0x03	; 3
 382:	61 05       	cpc	r22, r1
 384:	71 05       	cpc	r23, r1
 386:	98 f4       	brcc	.+38     	; 0x3ae <__stack+0x14f>
		{
			pulseBuffer[bufferIndex++] = true;
 388:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <_ZL11bufferIndex>
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	8e 0f       	add	r24, r30
 390:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <_ZL11bufferIndex>
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	ea 59       	subi	r30, 0x9A	; 154
 398:	ff 4f       	sbci	r31, 0xFF	; 255
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	80 83       	st	Z, r24

			if (bufferIndex >= BUFFER_SIZE)
 39e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <_ZL11bufferIndex>
 3a2:	80 32       	cpi	r24, 0x20	; 32
 3a4:	38 f1       	brcs	.+78     	; 0x3f4 <__stack+0x195>
			{
				captureState = FINAL_PULSE_STATE;
 3a6:	84 e0       	ldi	r24, 0x04	; 4
 3a8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_ZL12captureState>
 3ac:	23 c0       	rjmp	.+70     	; 0x3f4 <__stack+0x195>
			}
		}
		else if (!pulseLevel)
 3ae:	81 11       	cpse	r24, r1
 3b0:	21 c0       	rjmp	.+66     	; 0x3f4 <__stack+0x195>
		{
			bufferState = BUF_NOT_READY;
 3b2:	82 e0       	ldi	r24, 0x02	; 2
 3b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			captureState = WAIT_STATE;
 3b8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <_ZL12captureState>
 3bc:	1b c0       	rjmp	.+54     	; 0x3f4 <__stack+0x195>
		}
		break;
			
		// Final pulse
		case FINAL_PULSE_STATE:
		if (pulseLevel && capturedPulse >= lowPulseThrs[FINAL_PULSE] && capturedPulse <= upPulseThrs[FINAL_PULSE])
 3be:	88 23       	and	r24, r24
 3c0:	a1 f0       	breq	.+40     	; 0x3ea <__stack+0x18b>
 3c2:	4a 37       	cpi	r20, 0x7A	; 122
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	58 07       	cpc	r21, r24
 3c8:	61 05       	cpc	r22, r1
 3ca:	71 05       	cpc	r23, r1
 3cc:	70 f0       	brcs	.+28     	; 0x3ea <__stack+0x18b>
 3ce:	4f 3b       	cpi	r20, 0xBF	; 191
 3d0:	52 40       	sbci	r21, 0x02	; 2
 3d2:	61 05       	cpc	r22, r1
 3d4:	71 05       	cpc	r23, r1
 3d6:	48 f4       	brcc	.+18     	; 0x3ea <__stack+0x18b>
		{
			if (!repeatCode)
 3d8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 3dc:	81 11       	cpse	r24, r1
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <__stack+0x185>
			{
				bufferState = BUF_READY;
 3e0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			
			ovfCounter = 0;
 3e4:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <_ZL10ovfCounter>
 3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <__stack+0x191>
		}
		else
		{
			bufferState = BUF_NOT_READY;
 3ea:	82 e0       	ldi	r24, 0x02	; 2
 3ec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		
		captureState = WAIT_STATE;
 3f0:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <_ZL12captureState>
		break;
	}
		
	TCNT0 = 0;
 3f4:	12 be       	out	0x32, r1	; 50
}
 3f6:	ff 91       	pop	r31
 3f8:	ef 91       	pop	r30
 3fa:	9f 91       	pop	r25
 3fc:	8f 91       	pop	r24
 3fe:	7f 91       	pop	r23
 400:	6f 91       	pop	r22
 402:	5f 91       	pop	r21
 404:	4f 91       	pop	r20
 406:	0f 90       	pop	r0
 408:	0f be       	out	0x3f, r0	; 63
 40a:	0f 90       	pop	r0
 40c:	1f 90       	pop	r1
 40e:	18 95       	reti

00000410 <__vector_5>:

/* ---------------------------------------------------------------------- */

// Overflow interrupt (period = 32.768 ms)
ISR(TIMER0_OVF_vect)
{
 410:	1f 92       	push	r1
 412:	0f 92       	push	r0
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	0f 92       	push	r0
 418:	11 24       	eor	r1, r1
 41a:	8f 93       	push	r24
 41c:	9f 93       	push	r25
	ovfCounter++;
 41e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <_ZL10ovfCounter>
 422:	8f 5f       	subi	r24, 0xFF	; 255
 424:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <_ZL10ovfCounter>

	if (ovfCounter >= ovfsTimeout)
 428:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <_ZL10ovfCounter>
 42c:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <_ZL11ovfsTimeout>
 430:	98 17       	cp	r25, r24
 432:	50 f0       	brcs	.+20     	; 0x448 <__vector_5+0x38>
	{
		#if defined(__AVR_ATtiny85__)
		// Disable overflow interrupt for Timer/Counter0
		TIMSK |= _BV(TOIE0);
 434:	89 b7       	in	r24, 0x39	; 57
 436:	82 60       	ori	r24, 0x02	; 2
 438:	89 bf       	out	0x39, r24	; 57
		#elif defined(__AVR_ATtiny88__)
		// Disable overflow interrupt for Timer/Counter0
		TIMSK0 &= ~_BV(TOIE0);		
		#endif
		
		bufferState = BUF_NOT_READY;
 43a:	82 e0       	ldi	r24, 0x02	; 2
 43c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		captureState = WAIT_STATE;
 440:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <_ZL12captureState>
		ovfCounter = 0;
 444:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <_ZL10ovfCounter>
	}
}
 448:	9f 91       	pop	r25
 44a:	8f 91       	pop	r24
 44c:	0f 90       	pop	r0
 44e:	0f be       	out	0x3f, r0	; 63
 450:	0f 90       	pop	r0
 452:	1f 90       	pop	r1
 454:	18 95       	reti

00000456 <main>:
#include <util/delay.h>
#include "IR_NEC.h"

int main( void )
{
	DDRB = 0x02; 
 456:	82 e0       	ldi	r24, 0x02	; 2
 458:	87 bb       	out	0x17, r24	; 23
	const int delay = 1000;
	IR_init(100);
 45a:	64 e6       	ldi	r22, 0x64	; 100
 45c:	70 e0       	ldi	r23, 0x00	; 0
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	75 de       	rcall	.-790    	; 0x14e <_Z7IR_initm>
	sei();
 464:	78 94       	sei

	while(1)
	{
		PORTB |= 0x02;
 466:	88 b3       	in	r24, 0x18	; 24
 468:	82 60       	ori	r24, 0x02	; 2
 46a:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 46c:	2f e3       	ldi	r18, 0x3F	; 63
 46e:	8d e0       	ldi	r24, 0x0D	; 13
 470:	93 e0       	ldi	r25, 0x03	; 3
 472:	21 50       	subi	r18, 0x01	; 1
 474:	80 40       	sbci	r24, 0x00	; 0
 476:	90 40       	sbci	r25, 0x00	; 0
 478:	e1 f7       	brne	.-8      	; 0x472 <main+0x1c>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <main+0x26>
 47c:	00 00       	nop
		_delay_ms(delay);
		PORTB &= ~0x02;
 47e:	88 b3       	in	r24, 0x18	; 24
 480:	8d 7f       	andi	r24, 0xFD	; 253
 482:	88 bb       	out	0x18, r24	; 24
 484:	2f e3       	ldi	r18, 0x3F	; 63
 486:	8d e0       	ldi	r24, 0x0D	; 13
 488:	93 e0       	ldi	r25, 0x03	; 3
 48a:	21 50       	subi	r18, 0x01	; 1
 48c:	80 40       	sbci	r24, 0x00	; 0
 48e:	90 40       	sbci	r25, 0x00	; 0
 490:	e1 f7       	brne	.-8      	; 0x48a <main+0x34>
 492:	00 c0       	rjmp	.+0      	; 0x494 <main+0x3e>
 494:	00 00       	nop
		_delay_ms(delay);
		IR_data_ready();
 496:	8a de       	rcall	.-748    	; 0x1ac <_Z13IR_data_readyv>
 498:	e6 cf       	rjmp	.-52     	; 0x466 <main+0x10>

0000049a <__subsf3>:
 49a:	50 58       	subi	r21, 0x80	; 128

0000049c <__addsf3>:
 49c:	bb 27       	eor	r27, r27
 49e:	aa 27       	eor	r26, r26
 4a0:	0e d0       	rcall	.+28     	; 0x4be <__addsf3x>
 4a2:	48 c1       	rjmp	.+656    	; 0x734 <__fp_round>
 4a4:	39 d1       	rcall	.+626    	; 0x718 <__fp_pscA>
 4a6:	30 f0       	brcs	.+12     	; 0x4b4 <__addsf3+0x18>
 4a8:	3e d1       	rcall	.+636    	; 0x726 <__fp_pscB>
 4aa:	20 f0       	brcs	.+8      	; 0x4b4 <__addsf3+0x18>
 4ac:	31 f4       	brne	.+12     	; 0x4ba <__addsf3+0x1e>
 4ae:	9f 3f       	cpi	r25, 0xFF	; 255
 4b0:	11 f4       	brne	.+4      	; 0x4b6 <__addsf3+0x1a>
 4b2:	1e f4       	brtc	.+6      	; 0x4ba <__addsf3+0x1e>
 4b4:	2e c1       	rjmp	.+604    	; 0x712 <__fp_nan>
 4b6:	0e f4       	brtc	.+2      	; 0x4ba <__addsf3+0x1e>
 4b8:	e0 95       	com	r30
 4ba:	e7 fb       	bst	r30, 7
 4bc:	24 c1       	rjmp	.+584    	; 0x706 <__fp_inf>

000004be <__addsf3x>:
 4be:	e9 2f       	mov	r30, r25
 4c0:	4a d1       	rcall	.+660    	; 0x756 <__fp_split3>
 4c2:	80 f3       	brcs	.-32     	; 0x4a4 <__addsf3+0x8>
 4c4:	ba 17       	cp	r27, r26
 4c6:	62 07       	cpc	r22, r18
 4c8:	73 07       	cpc	r23, r19
 4ca:	84 07       	cpc	r24, r20
 4cc:	95 07       	cpc	r25, r21
 4ce:	18 f0       	brcs	.+6      	; 0x4d6 <__addsf3x+0x18>
 4d0:	71 f4       	brne	.+28     	; 0x4ee <__addsf3x+0x30>
 4d2:	9e f5       	brtc	.+102    	; 0x53a <__addsf3x+0x7c>
 4d4:	62 c1       	rjmp	.+708    	; 0x79a <__fp_zero>
 4d6:	0e f4       	brtc	.+2      	; 0x4da <__addsf3x+0x1c>
 4d8:	e0 95       	com	r30
 4da:	0b 2e       	mov	r0, r27
 4dc:	ba 2f       	mov	r27, r26
 4de:	a0 2d       	mov	r26, r0
 4e0:	0b 01       	movw	r0, r22
 4e2:	b9 01       	movw	r22, r18
 4e4:	90 01       	movw	r18, r0
 4e6:	0c 01       	movw	r0, r24
 4e8:	ca 01       	movw	r24, r20
 4ea:	a0 01       	movw	r20, r0
 4ec:	11 24       	eor	r1, r1
 4ee:	ff 27       	eor	r31, r31
 4f0:	59 1b       	sub	r21, r25
 4f2:	99 f0       	breq	.+38     	; 0x51a <__addsf3x+0x5c>
 4f4:	59 3f       	cpi	r21, 0xF9	; 249
 4f6:	50 f4       	brcc	.+20     	; 0x50c <__addsf3x+0x4e>
 4f8:	50 3e       	cpi	r21, 0xE0	; 224
 4fa:	68 f1       	brcs	.+90     	; 0x556 <__addsf3x+0x98>
 4fc:	1a 16       	cp	r1, r26
 4fe:	f0 40       	sbci	r31, 0x00	; 0
 500:	a2 2f       	mov	r26, r18
 502:	23 2f       	mov	r18, r19
 504:	34 2f       	mov	r19, r20
 506:	44 27       	eor	r20, r20
 508:	58 5f       	subi	r21, 0xF8	; 248
 50a:	f3 cf       	rjmp	.-26     	; 0x4f2 <__addsf3x+0x34>
 50c:	46 95       	lsr	r20
 50e:	37 95       	ror	r19
 510:	27 95       	ror	r18
 512:	a7 95       	ror	r26
 514:	f0 40       	sbci	r31, 0x00	; 0
 516:	53 95       	inc	r21
 518:	c9 f7       	brne	.-14     	; 0x50c <__addsf3x+0x4e>
 51a:	7e f4       	brtc	.+30     	; 0x53a <__addsf3x+0x7c>
 51c:	1f 16       	cp	r1, r31
 51e:	ba 0b       	sbc	r27, r26
 520:	62 0b       	sbc	r22, r18
 522:	73 0b       	sbc	r23, r19
 524:	84 0b       	sbc	r24, r20
 526:	ba f0       	brmi	.+46     	; 0x556 <__addsf3x+0x98>
 528:	91 50       	subi	r25, 0x01	; 1
 52a:	a1 f0       	breq	.+40     	; 0x554 <__addsf3x+0x96>
 52c:	ff 0f       	add	r31, r31
 52e:	bb 1f       	adc	r27, r27
 530:	66 1f       	adc	r22, r22
 532:	77 1f       	adc	r23, r23
 534:	88 1f       	adc	r24, r24
 536:	c2 f7       	brpl	.-16     	; 0x528 <__addsf3x+0x6a>
 538:	0e c0       	rjmp	.+28     	; 0x556 <__addsf3x+0x98>
 53a:	ba 0f       	add	r27, r26
 53c:	62 1f       	adc	r22, r18
 53e:	73 1f       	adc	r23, r19
 540:	84 1f       	adc	r24, r20
 542:	48 f4       	brcc	.+18     	; 0x556 <__addsf3x+0x98>
 544:	87 95       	ror	r24
 546:	77 95       	ror	r23
 548:	67 95       	ror	r22
 54a:	b7 95       	ror	r27
 54c:	f7 95       	ror	r31
 54e:	9e 3f       	cpi	r25, 0xFE	; 254
 550:	08 f0       	brcs	.+2      	; 0x554 <__addsf3x+0x96>
 552:	b3 cf       	rjmp	.-154    	; 0x4ba <__addsf3+0x1e>
 554:	93 95       	inc	r25
 556:	88 0f       	add	r24, r24
 558:	08 f0       	brcs	.+2      	; 0x55c <__addsf3x+0x9e>
 55a:	99 27       	eor	r25, r25
 55c:	ee 0f       	add	r30, r30
 55e:	97 95       	ror	r25
 560:	87 95       	ror	r24
 562:	08 95       	ret

00000564 <__divsf3>:
 564:	0c d0       	rcall	.+24     	; 0x57e <__divsf3x>
 566:	e6 c0       	rjmp	.+460    	; 0x734 <__fp_round>
 568:	de d0       	rcall	.+444    	; 0x726 <__fp_pscB>
 56a:	40 f0       	brcs	.+16     	; 0x57c <__divsf3+0x18>
 56c:	d5 d0       	rcall	.+426    	; 0x718 <__fp_pscA>
 56e:	30 f0       	brcs	.+12     	; 0x57c <__divsf3+0x18>
 570:	21 f4       	brne	.+8      	; 0x57a <__divsf3+0x16>
 572:	5f 3f       	cpi	r21, 0xFF	; 255
 574:	19 f0       	breq	.+6      	; 0x57c <__divsf3+0x18>
 576:	c7 c0       	rjmp	.+398    	; 0x706 <__fp_inf>
 578:	51 11       	cpse	r21, r1
 57a:	10 c1       	rjmp	.+544    	; 0x79c <__fp_szero>
 57c:	ca c0       	rjmp	.+404    	; 0x712 <__fp_nan>

0000057e <__divsf3x>:
 57e:	eb d0       	rcall	.+470    	; 0x756 <__fp_split3>
 580:	98 f3       	brcs	.-26     	; 0x568 <__divsf3+0x4>

00000582 <__divsf3_pse>:
 582:	99 23       	and	r25, r25
 584:	c9 f3       	breq	.-14     	; 0x578 <__divsf3+0x14>
 586:	55 23       	and	r21, r21
 588:	b1 f3       	breq	.-20     	; 0x576 <__divsf3+0x12>
 58a:	95 1b       	sub	r25, r21
 58c:	55 0b       	sbc	r21, r21
 58e:	bb 27       	eor	r27, r27
 590:	aa 27       	eor	r26, r26
 592:	62 17       	cp	r22, r18
 594:	73 07       	cpc	r23, r19
 596:	84 07       	cpc	r24, r20
 598:	38 f0       	brcs	.+14     	; 0x5a8 <__divsf3_pse+0x26>
 59a:	9f 5f       	subi	r25, 0xFF	; 255
 59c:	5f 4f       	sbci	r21, 0xFF	; 255
 59e:	22 0f       	add	r18, r18
 5a0:	33 1f       	adc	r19, r19
 5a2:	44 1f       	adc	r20, r20
 5a4:	aa 1f       	adc	r26, r26
 5a6:	a9 f3       	breq	.-22     	; 0x592 <__divsf3_pse+0x10>
 5a8:	33 d0       	rcall	.+102    	; 0x610 <__divsf3_pse+0x8e>
 5aa:	0e 2e       	mov	r0, r30
 5ac:	3a f0       	brmi	.+14     	; 0x5bc <__divsf3_pse+0x3a>
 5ae:	e0 e8       	ldi	r30, 0x80	; 128
 5b0:	30 d0       	rcall	.+96     	; 0x612 <__divsf3_pse+0x90>
 5b2:	91 50       	subi	r25, 0x01	; 1
 5b4:	50 40       	sbci	r21, 0x00	; 0
 5b6:	e6 95       	lsr	r30
 5b8:	00 1c       	adc	r0, r0
 5ba:	ca f7       	brpl	.-14     	; 0x5ae <__divsf3_pse+0x2c>
 5bc:	29 d0       	rcall	.+82     	; 0x610 <__divsf3_pse+0x8e>
 5be:	fe 2f       	mov	r31, r30
 5c0:	27 d0       	rcall	.+78     	; 0x610 <__divsf3_pse+0x8e>
 5c2:	66 0f       	add	r22, r22
 5c4:	77 1f       	adc	r23, r23
 5c6:	88 1f       	adc	r24, r24
 5c8:	bb 1f       	adc	r27, r27
 5ca:	26 17       	cp	r18, r22
 5cc:	37 07       	cpc	r19, r23
 5ce:	48 07       	cpc	r20, r24
 5d0:	ab 07       	cpc	r26, r27
 5d2:	b0 e8       	ldi	r27, 0x80	; 128
 5d4:	09 f0       	breq	.+2      	; 0x5d8 <__divsf3_pse+0x56>
 5d6:	bb 0b       	sbc	r27, r27
 5d8:	80 2d       	mov	r24, r0
 5da:	bf 01       	movw	r22, r30
 5dc:	ff 27       	eor	r31, r31
 5de:	93 58       	subi	r25, 0x83	; 131
 5e0:	5f 4f       	sbci	r21, 0xFF	; 255
 5e2:	2a f0       	brmi	.+10     	; 0x5ee <__divsf3_pse+0x6c>
 5e4:	9e 3f       	cpi	r25, 0xFE	; 254
 5e6:	51 05       	cpc	r21, r1
 5e8:	68 f0       	brcs	.+26     	; 0x604 <__divsf3_pse+0x82>
 5ea:	8d c0       	rjmp	.+282    	; 0x706 <__fp_inf>
 5ec:	d7 c0       	rjmp	.+430    	; 0x79c <__fp_szero>
 5ee:	5f 3f       	cpi	r21, 0xFF	; 255
 5f0:	ec f3       	brlt	.-6      	; 0x5ec <__divsf3_pse+0x6a>
 5f2:	98 3e       	cpi	r25, 0xE8	; 232
 5f4:	dc f3       	brlt	.-10     	; 0x5ec <__divsf3_pse+0x6a>
 5f6:	86 95       	lsr	r24
 5f8:	77 95       	ror	r23
 5fa:	67 95       	ror	r22
 5fc:	b7 95       	ror	r27
 5fe:	f7 95       	ror	r31
 600:	9f 5f       	subi	r25, 0xFF	; 255
 602:	c9 f7       	brne	.-14     	; 0x5f6 <__divsf3_pse+0x74>
 604:	88 0f       	add	r24, r24
 606:	91 1d       	adc	r25, r1
 608:	96 95       	lsr	r25
 60a:	87 95       	ror	r24
 60c:	97 f9       	bld	r25, 7
 60e:	08 95       	ret
 610:	e1 e0       	ldi	r30, 0x01	; 1
 612:	66 0f       	add	r22, r22
 614:	77 1f       	adc	r23, r23
 616:	88 1f       	adc	r24, r24
 618:	bb 1f       	adc	r27, r27
 61a:	62 17       	cp	r22, r18
 61c:	73 07       	cpc	r23, r19
 61e:	84 07       	cpc	r24, r20
 620:	ba 07       	cpc	r27, r26
 622:	20 f0       	brcs	.+8      	; 0x62c <__divsf3_pse+0xaa>
 624:	62 1b       	sub	r22, r18
 626:	73 0b       	sbc	r23, r19
 628:	84 0b       	sbc	r24, r20
 62a:	ba 0b       	sbc	r27, r26
 62c:	ee 1f       	adc	r30, r30
 62e:	88 f7       	brcc	.-30     	; 0x612 <__divsf3_pse+0x90>
 630:	e0 95       	com	r30
 632:	08 95       	ret

00000634 <__fixunssfsi>:
 634:	98 d0       	rcall	.+304    	; 0x766 <__fp_splitA>
 636:	88 f0       	brcs	.+34     	; 0x65a <__fixunssfsi+0x26>
 638:	9f 57       	subi	r25, 0x7F	; 127
 63a:	90 f0       	brcs	.+36     	; 0x660 <__fixunssfsi+0x2c>
 63c:	b9 2f       	mov	r27, r25
 63e:	99 27       	eor	r25, r25
 640:	b7 51       	subi	r27, 0x17	; 23
 642:	a0 f0       	brcs	.+40     	; 0x66c <__fixunssfsi+0x38>
 644:	d1 f0       	breq	.+52     	; 0x67a <__fixunssfsi+0x46>
 646:	66 0f       	add	r22, r22
 648:	77 1f       	adc	r23, r23
 64a:	88 1f       	adc	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	1a f0       	brmi	.+6      	; 0x656 <__fixunssfsi+0x22>
 650:	ba 95       	dec	r27
 652:	c9 f7       	brne	.-14     	; 0x646 <__fixunssfsi+0x12>
 654:	12 c0       	rjmp	.+36     	; 0x67a <__fixunssfsi+0x46>
 656:	b1 30       	cpi	r27, 0x01	; 1
 658:	81 f0       	breq	.+32     	; 0x67a <__fixunssfsi+0x46>
 65a:	9f d0       	rcall	.+318    	; 0x79a <__fp_zero>
 65c:	b1 e0       	ldi	r27, 0x01	; 1
 65e:	08 95       	ret
 660:	9c c0       	rjmp	.+312    	; 0x79a <__fp_zero>
 662:	67 2f       	mov	r22, r23
 664:	78 2f       	mov	r23, r24
 666:	88 27       	eor	r24, r24
 668:	b8 5f       	subi	r27, 0xF8	; 248
 66a:	39 f0       	breq	.+14     	; 0x67a <__fixunssfsi+0x46>
 66c:	b9 3f       	cpi	r27, 0xF9	; 249
 66e:	cc f3       	brlt	.-14     	; 0x662 <__fixunssfsi+0x2e>
 670:	86 95       	lsr	r24
 672:	77 95       	ror	r23
 674:	67 95       	ror	r22
 676:	b3 95       	inc	r27
 678:	d9 f7       	brne	.-10     	; 0x670 <__fixunssfsi+0x3c>
 67a:	3e f4       	brtc	.+14     	; 0x68a <__fixunssfsi+0x56>
 67c:	90 95       	com	r25
 67e:	80 95       	com	r24
 680:	70 95       	com	r23
 682:	61 95       	neg	r22
 684:	7f 4f       	sbci	r23, 0xFF	; 255
 686:	8f 4f       	sbci	r24, 0xFF	; 255
 688:	9f 4f       	sbci	r25, 0xFF	; 255
 68a:	08 95       	ret

0000068c <__floatunsisf>:
 68c:	e8 94       	clt
 68e:	09 c0       	rjmp	.+18     	; 0x6a2 <__floatsisf+0x12>

00000690 <__floatsisf>:
 690:	97 fb       	bst	r25, 7
 692:	3e f4       	brtc	.+14     	; 0x6a2 <__floatsisf+0x12>
 694:	90 95       	com	r25
 696:	80 95       	com	r24
 698:	70 95       	com	r23
 69a:	61 95       	neg	r22
 69c:	7f 4f       	sbci	r23, 0xFF	; 255
 69e:	8f 4f       	sbci	r24, 0xFF	; 255
 6a0:	9f 4f       	sbci	r25, 0xFF	; 255
 6a2:	99 23       	and	r25, r25
 6a4:	a9 f0       	breq	.+42     	; 0x6d0 <__floatsisf+0x40>
 6a6:	f9 2f       	mov	r31, r25
 6a8:	96 e9       	ldi	r25, 0x96	; 150
 6aa:	bb 27       	eor	r27, r27
 6ac:	93 95       	inc	r25
 6ae:	f6 95       	lsr	r31
 6b0:	87 95       	ror	r24
 6b2:	77 95       	ror	r23
 6b4:	67 95       	ror	r22
 6b6:	b7 95       	ror	r27
 6b8:	f1 11       	cpse	r31, r1
 6ba:	f8 cf       	rjmp	.-16     	; 0x6ac <__floatsisf+0x1c>
 6bc:	fa f4       	brpl	.+62     	; 0x6fc <__floatsisf+0x6c>
 6be:	bb 0f       	add	r27, r27
 6c0:	11 f4       	brne	.+4      	; 0x6c6 <__floatsisf+0x36>
 6c2:	60 ff       	sbrs	r22, 0
 6c4:	1b c0       	rjmp	.+54     	; 0x6fc <__floatsisf+0x6c>
 6c6:	6f 5f       	subi	r22, 0xFF	; 255
 6c8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ca:	8f 4f       	sbci	r24, 0xFF	; 255
 6cc:	9f 4f       	sbci	r25, 0xFF	; 255
 6ce:	16 c0       	rjmp	.+44     	; 0x6fc <__floatsisf+0x6c>
 6d0:	88 23       	and	r24, r24
 6d2:	11 f0       	breq	.+4      	; 0x6d8 <__floatsisf+0x48>
 6d4:	96 e9       	ldi	r25, 0x96	; 150
 6d6:	11 c0       	rjmp	.+34     	; 0x6fa <__floatsisf+0x6a>
 6d8:	77 23       	and	r23, r23
 6da:	21 f0       	breq	.+8      	; 0x6e4 <__floatsisf+0x54>
 6dc:	9e e8       	ldi	r25, 0x8E	; 142
 6de:	87 2f       	mov	r24, r23
 6e0:	76 2f       	mov	r23, r22
 6e2:	05 c0       	rjmp	.+10     	; 0x6ee <__floatsisf+0x5e>
 6e4:	66 23       	and	r22, r22
 6e6:	71 f0       	breq	.+28     	; 0x704 <__floatsisf+0x74>
 6e8:	96 e8       	ldi	r25, 0x86	; 134
 6ea:	86 2f       	mov	r24, r22
 6ec:	70 e0       	ldi	r23, 0x00	; 0
 6ee:	60 e0       	ldi	r22, 0x00	; 0
 6f0:	2a f0       	brmi	.+10     	; 0x6fc <__floatsisf+0x6c>
 6f2:	9a 95       	dec	r25
 6f4:	66 0f       	add	r22, r22
 6f6:	77 1f       	adc	r23, r23
 6f8:	88 1f       	adc	r24, r24
 6fa:	da f7       	brpl	.-10     	; 0x6f2 <__floatsisf+0x62>
 6fc:	88 0f       	add	r24, r24
 6fe:	96 95       	lsr	r25
 700:	87 95       	ror	r24
 702:	97 f9       	bld	r25, 7
 704:	08 95       	ret

00000706 <__fp_inf>:
 706:	97 f9       	bld	r25, 7
 708:	9f 67       	ori	r25, 0x7F	; 127
 70a:	80 e8       	ldi	r24, 0x80	; 128
 70c:	70 e0       	ldi	r23, 0x00	; 0
 70e:	60 e0       	ldi	r22, 0x00	; 0
 710:	08 95       	ret

00000712 <__fp_nan>:
 712:	9f ef       	ldi	r25, 0xFF	; 255
 714:	80 ec       	ldi	r24, 0xC0	; 192
 716:	08 95       	ret

00000718 <__fp_pscA>:
 718:	00 24       	eor	r0, r0
 71a:	0a 94       	dec	r0
 71c:	16 16       	cp	r1, r22
 71e:	17 06       	cpc	r1, r23
 720:	18 06       	cpc	r1, r24
 722:	09 06       	cpc	r0, r25
 724:	08 95       	ret

00000726 <__fp_pscB>:
 726:	00 24       	eor	r0, r0
 728:	0a 94       	dec	r0
 72a:	12 16       	cp	r1, r18
 72c:	13 06       	cpc	r1, r19
 72e:	14 06       	cpc	r1, r20
 730:	05 06       	cpc	r0, r21
 732:	08 95       	ret

00000734 <__fp_round>:
 734:	09 2e       	mov	r0, r25
 736:	03 94       	inc	r0
 738:	00 0c       	add	r0, r0
 73a:	11 f4       	brne	.+4      	; 0x740 <__fp_round+0xc>
 73c:	88 23       	and	r24, r24
 73e:	52 f0       	brmi	.+20     	; 0x754 <__fp_round+0x20>
 740:	bb 0f       	add	r27, r27
 742:	40 f4       	brcc	.+16     	; 0x754 <__fp_round+0x20>
 744:	bf 2b       	or	r27, r31
 746:	11 f4       	brne	.+4      	; 0x74c <__fp_round+0x18>
 748:	60 ff       	sbrs	r22, 0
 74a:	04 c0       	rjmp	.+8      	; 0x754 <__fp_round+0x20>
 74c:	6f 5f       	subi	r22, 0xFF	; 255
 74e:	7f 4f       	sbci	r23, 0xFF	; 255
 750:	8f 4f       	sbci	r24, 0xFF	; 255
 752:	9f 4f       	sbci	r25, 0xFF	; 255
 754:	08 95       	ret

00000756 <__fp_split3>:
 756:	57 fd       	sbrc	r21, 7
 758:	90 58       	subi	r25, 0x80	; 128
 75a:	44 0f       	add	r20, r20
 75c:	55 1f       	adc	r21, r21
 75e:	59 f0       	breq	.+22     	; 0x776 <__fp_splitA+0x10>
 760:	5f 3f       	cpi	r21, 0xFF	; 255
 762:	71 f0       	breq	.+28     	; 0x780 <__fp_splitA+0x1a>
 764:	47 95       	ror	r20

00000766 <__fp_splitA>:
 766:	88 0f       	add	r24, r24
 768:	97 fb       	bst	r25, 7
 76a:	99 1f       	adc	r25, r25
 76c:	61 f0       	breq	.+24     	; 0x786 <__fp_splitA+0x20>
 76e:	9f 3f       	cpi	r25, 0xFF	; 255
 770:	79 f0       	breq	.+30     	; 0x790 <__fp_splitA+0x2a>
 772:	87 95       	ror	r24
 774:	08 95       	ret
 776:	12 16       	cp	r1, r18
 778:	13 06       	cpc	r1, r19
 77a:	14 06       	cpc	r1, r20
 77c:	55 1f       	adc	r21, r21
 77e:	f2 cf       	rjmp	.-28     	; 0x764 <__fp_split3+0xe>
 780:	46 95       	lsr	r20
 782:	f1 df       	rcall	.-30     	; 0x766 <__fp_splitA>
 784:	08 c0       	rjmp	.+16     	; 0x796 <__fp_splitA+0x30>
 786:	16 16       	cp	r1, r22
 788:	17 06       	cpc	r1, r23
 78a:	18 06       	cpc	r1, r24
 78c:	99 1f       	adc	r25, r25
 78e:	f1 cf       	rjmp	.-30     	; 0x772 <__fp_splitA+0xc>
 790:	86 95       	lsr	r24
 792:	71 05       	cpc	r23, r1
 794:	61 05       	cpc	r22, r1
 796:	08 94       	sec
 798:	08 95       	ret

0000079a <__fp_zero>:
 79a:	e8 94       	clt

0000079c <__fp_szero>:
 79c:	bb 27       	eor	r27, r27
 79e:	66 27       	eor	r22, r22
 7a0:	77 27       	eor	r23, r23
 7a2:	cb 01       	movw	r24, r22
 7a4:	97 f9       	bld	r25, 7
 7a6:	08 95       	ret

000007a8 <_exit>:
 7a8:	f8 94       	cli

000007aa <__stop_program>:
 7aa:	ff cf       	rjmp	.-2      	; 0x7aa <__stop_program>
