
Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000024a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000002be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008cf  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000061c  00000000  00000000  00000c63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000047e  00000000  00000000  0000127f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00001700  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000444  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000313  00000000  00000000  00001c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00001f43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	e6 c0       	rjmp	.+460    	; 0x1d0 <__vector_1>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a2 36       	cpi	r26, 0x62	; 98
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	b9 d0       	rcall	.+370    	; 0x1ae <main>
  3c:	04 c1       	rjmp	.+520    	; 0x246 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <_Z5blinkv>:
const int delay = 1000;
int change = 0;

void blink()
{
	PORTB |= 0x02;
  40:	88 b3       	in	r24, 0x18	; 24
  42:	82 60       	ori	r24, 0x02	; 2
  44:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  46:	2f e3       	ldi	r18, 0x3F	; 63
  48:	8d e0       	ldi	r24, 0x0D	; 13
  4a:	93 e0       	ldi	r25, 0x03	; 3
  4c:	21 50       	subi	r18, 0x01	; 1
  4e:	80 40       	sbci	r24, 0x00	; 0
  50:	90 40       	sbci	r25, 0x00	; 0
  52:	e1 f7       	brne	.-8      	; 0x4c <_Z5blinkv+0xc>
  54:	00 c0       	rjmp	.+0      	; 0x56 <_Z5blinkv+0x16>
  56:	00 00       	nop
	_delay_ms(delay);
	PORTB &= ~0x02;
  58:	88 b3       	in	r24, 0x18	; 24
  5a:	8d 7f       	andi	r24, 0xFD	; 253
  5c:	88 bb       	out	0x18, r24	; 24
  5e:	08 95       	ret

00000060 <_Z17wait_until_changev>:

//waits until the interrupt pin is triggered and records how long the device waited for a response in us
int wait_until_change()
{
	int count = 0;
	GIMSK |= _BV(INT0);
  60:	8b b7       	in	r24, 0x3b	; 59
  62:	80 64       	ori	r24, 0x40	; 64
  64:	8b bf       	out	0x3b, r24	; 59
}

//waits until the interrupt pin is triggered and records how long the device waited for a response in us
int wait_until_change()
{
	int count = 0;
  66:	80 e0       	ldi	r24, 0x00	; 0
  68:	90 e0       	ldi	r25, 0x00	; 0
	GIMSK |= _BV(INT0);
	while(!change)
  6a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  6e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  72:	23 2b       	or	r18, r19
  74:	61 f4       	brne	.+24     	; 0x8e <_Z17wait_until_changev+0x2e>
	{
		//Increment & reset when it's been increasing for too long
		count++;
  76:	01 96       	adiw	r24, 0x01	; 1
		if(count == 1500) count = 0;
  78:	8c 3d       	cpi	r24, 0xDC	; 220
  7a:	25 e0       	ldi	r18, 0x05	; 5
  7c:	92 07       	cpc	r25, r18
  7e:	11 f4       	brne	.+4      	; 0x84 <_Z17wait_until_changev+0x24>
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	23 e0       	ldi	r18, 0x03	; 3
  86:	2a 95       	dec	r18
  88:	f1 f7       	brne	.-4      	; 0x86 <_Z17wait_until_changev+0x26>
  8a:	00 00       	nop
  8c:	ee cf       	rjmp	.-36     	; 0x6a <_Z17wait_until_changev+0xa>

		_delay_us(10);
	}
	change = FALSE;
  8e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  92:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	GIMSK &= ~_BV(INT0);
  96:	2b b7       	in	r18, 0x3b	; 59
  98:	2f 7b       	andi	r18, 0xBF	; 191
  9a:	2b bf       	out	0x3b, r18	; 59
	return count / 10;
  9c:	6a e0       	ldi	r22, 0x0A	; 10
  9e:	70 e0       	ldi	r23, 0x00	; 0
  a0:	ab d0       	rcall	.+342    	; 0x1f8 <__divmodhi4>
  a2:	cb 01       	movw	r24, r22
}
  a4:	08 95       	ret

000000a6 <_Z18record_square_wavev>:

//Record the length of 1 pulse of a square wave
int record_square_wave()
{
	int length;
	wait_until_change();
  a6:	dc df       	rcall	.-72     	; 0x60 <_Z17wait_until_changev>
	length = wait_until_change();
  a8:	db df       	rcall	.-74     	; 0x60 <_Z17wait_until_changev>
	return length;	
}
  aa:	08 95       	ret

000000ac <_Z8read_bitv>:

//Read in a single bit of the IR code based on the length of the square wave
char read_bit()
{
	int length;
	length = record_square_wave();
  ac:	fc df       	rcall	.-8      	; 0xa6 <_Z18record_square_wavev>
	if(length < ONE_PULSE)
  ae:	86 34       	cpi	r24, 0x46	; 70
  b0:	95 40       	sbci	r25, 0x05	; 5
  b2:	14 f4       	brge	.+4      	; 0xb8 <_Z8read_bitv+0xc>
		return 0x00;
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	08 95       	ret
	else
		return 0x01;
  b8:	81 e0       	ldi	r24, 0x01	; 1
}
  ba:	08 95       	ret

000000bc <_Z9read_bytev>:

char read_byte()
{
  bc:	1f 93       	push	r17
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
	char output = 0x00;
	for(int i = 0; i < 8; i++)
  c2:	c0 e0       	ldi	r28, 0x00	; 0
  c4:	d0 e0       	ldi	r29, 0x00	; 0
		return 0x01;
}

char read_byte()
{
	char output = 0x00;
  c6:	10 e0       	ldi	r17, 0x00	; 0
	for(int i = 0; i < 8; i++)
  c8:	c8 30       	cpi	r28, 0x08	; 8
  ca:	d1 05       	cpc	r29, r1
  cc:	74 f4       	brge	.+28     	; 0xea <_Z9read_bytev+0x2e>
		output |= read_bit() << (7 - i);
  ce:	ee df       	rcall	.-36     	; 0xac <_Z8read_bitv>
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	27 e0       	ldi	r18, 0x07	; 7
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	2c 1b       	sub	r18, r28
  d8:	3d 0b       	sbc	r19, r29
  da:	02 c0       	rjmp	.+4      	; 0xe0 <_Z9read_bytev+0x24>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	2a 95       	dec	r18
  e2:	e2 f7       	brpl	.-8      	; 0xdc <_Z9read_bytev+0x20>
  e4:	18 2b       	or	r17, r24
}

char read_byte()
{
	char output = 0x00;
	for(int i = 0; i < 8; i++)
  e6:	21 96       	adiw	r28, 0x01	; 1
  e8:	ef cf       	rjmp	.-34     	; 0xc8 <_Z9read_bytev+0xc>
		output |= read_bit() << (7 - i);

	return output;
}
  ea:	81 2f       	mov	r24, r17
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	1f 91       	pop	r17
  f2:	08 95       	ret

000000f4 <_Z7IR_Recvv>:

IR_cmd IR_Recv()
{
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
	int length;
	IR_cmd output;
	IR_cmd inv_output;

	//Wait for the beginning of the AGC pulse
	length = record_square_wave();
  fc:	d4 df       	rcall	.-88     	; 0xa6 <_Z18record_square_wavev>
	
	//Reject command if nothing the AGC isn't long enough
	if(length < AGC_PULSE)
  fe:	80 34       	cpi	r24, 0x40	; 64
 100:	9f 41       	sbci	r25, 0x1F	; 31
 102:	1c f4       	brge	.+6      	; 0x10a <_Z7IR_Recvv+0x16>
	{
		output.addr = 0;
		output.cmd = 0;
		return output;
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	2b c0       	rjmp	.+86     	; 0x160 <_Z7IR_Recvv+0x6c>
	}
	
	//Record the length of the pause & set scanning mode from active high to active low
	length = wait_until_change();
 10a:	aa df       	rcall	.-172    	; 0x60 <_Z17wait_until_changev>

	//Return 0, 0 for repeat commands 
	//TODO: implement code to read repeat commands
	if(length < LONG_PULSE)
 10c:	8c 3a       	cpi	r24, 0xAC	; 172
 10e:	9d 40       	sbci	r25, 0x0D	; 13
 110:	24 f4       	brge	.+8      	; 0x11a <_Z7IR_Recvv+0x26>
	{
		//wait until the stop bit ends
		wait_until_change();
 112:	a6 df       	rcall	.-180    	; 0x60 <_Z17wait_until_changev>

		output.addr = 0;
		output.cmd = 0;
		return output;
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	23 c0       	rjmp	.+70     	; 0x160 <_Z7IR_Recvv+0x6c>
	}

	//Read the address
	output.addr = read_byte();
 11a:	d0 df       	rcall	.-96     	; 0xbc <_Z9read_bytev>
 11c:	c8 2f       	mov	r28, r24

	//Read the inverted address 
	inv_output.addr = read_byte();
 11e:	ce df       	rcall	.-100    	; 0xbc <_Z9read_bytev>
 120:	18 2f       	mov	r17, r24
	
	//Read the command
	output.cmd = read_byte();
 122:	cc df       	rcall	.-104    	; 0xbc <_Z9read_bytev>
 124:	d8 2f       	mov	r29, r24

	//Read the inverted output
	inv_output.cmd = read_byte();
 126:	ca df       	rcall	.-108    	; 0xbc <_Z9read_bytev>
 128:	08 2f       	mov	r16, r24
	
	//Wait until the stop bit ends
	length = wait_until_change();
 12a:	9a df       	rcall	.-204    	; 0x60 <_Z17wait_until_changev>

	//Check for error conditions regarding the inverted bits & the length of the stop bit
	if
	(
		output.addr != ~(inv_output.addr) || 
 12c:	4c 2f       	mov	r20, r28
 12e:	50 e0       	ldi	r21, 0x00	; 0
 130:	21 2f       	mov	r18, r17
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	20 95       	com	r18
 136:	30 95       	com	r19
	
	//Wait until the stop bit ends
	length = wait_until_change();

	//Check for error conditions regarding the inverted bits & the length of the stop bit
	if
 138:	42 17       	cp	r20, r18
 13a:	53 07       	cpc	r21, r19
 13c:	61 f4       	brne	.+24     	; 0x156 <_Z7IR_Recvv+0x62>
	(
		output.addr != ~(inv_output.addr) || 
		output.cmd != ~(inv_output.cmd) || 
 13e:	4d 2f       	mov	r20, r29
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	20 2f       	mov	r18, r16
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	20 95       	com	r18
 148:	30 95       	com	r19
	length = wait_until_change();

	//Check for error conditions regarding the inverted bits & the length of the stop bit
	if
	(
		output.addr != ~(inv_output.addr) || 
 14a:	42 17       	cp	r20, r18
 14c:	53 07       	cpc	r21, r19
 14e:	19 f4       	brne	.+6      	; 0x156 <_Z7IR_Recvv+0x62>
		output.cmd != ~(inv_output.cmd) || 
 150:	84 3f       	cpi	r24, 0xF4	; 244
 152:	91 40       	sbci	r25, 0x01	; 1
 154:	1c f4       	brge	.+6      	; 0x15c <_Z7IR_Recvv+0x68>
		length < STOP_BIT
	)
	{
		output.addr = 0;
		output.cmd = 0;
		return output;
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <_Z7IR_Recvv+0x6c>
	}
	
	return output;
 15c:	8c 2f       	mov	r24, r28
 15e:	9d 2f       	mov	r25, r29
}
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	1f 91       	pop	r17
 166:	0f 91       	pop	r16
 168:	08 95       	ret

0000016a <_Z8USI_initv>:

void USI_init()
{
	//Set Two-Wire mode
	USICR |= _BV(USIWM1);
 16a:	8d b1       	in	r24, 0x0d	; 13
 16c:	80 62       	ori	r24, 0x20	; 32
 16e:	8d b9       	out	0x0d, r24	; 13

	//Set software clock mode for simplicity
	USICR |= _BV(USICLK);
 170:	8d b1       	in	r24, 0x0d	; 13
 172:	82 60       	ori	r24, 0x02	; 2
 174:	8d b9       	out	0x0d, r24	; 13
 176:	08 95       	ret

00000178 <_Z9USI_Writec>:
}

void USI_Write(char data)
{
	USIDR = data;
 178:	8f b9       	out	0x0f, r24	; 15
	
	for(int i = 0; i < 8; i++)
 17a:	20 e0       	ldi	r18, 0x00	; 0
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	28 30       	cpi	r18, 0x08	; 8
 180:	31 05       	cpc	r19, r1
 182:	a4 f4       	brge	.+40     	; 0x1ac <_Z9USI_Writec+0x34>
	{
		//Send a bit
		USICR |= _BV(USICLK);
 184:	8d b1       	in	r24, 0x0d	; 13
 186:	82 60       	ori	r24, 0x02	; 2
 188:	8d b9       	out	0x0d, r24	; 13

		//Pulse a square wave on the SCL line
		USICR |= _BV(USITC);
 18a:	8d b1       	in	r24, 0x0d	; 13
 18c:	81 60       	ori	r24, 0x01	; 1
 18e:	8d b9       	out	0x0d, r24	; 13
 190:	81 e2       	ldi	r24, 0x21	; 33
 192:	8a 95       	dec	r24
 194:	f1 f7       	brne	.-4      	; 0x192 <_Z9USI_Writec+0x1a>
 196:	00 00       	nop
		_delay_us(100);
		USICR |= _BV(USITC);
 198:	8d b1       	in	r24, 0x0d	; 13
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	8d b9       	out	0x0d, r24	; 13
 19e:	81 e2       	ldi	r24, 0x21	; 33
 1a0:	8a 95       	dec	r24
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <_Z9USI_Writec+0x28>
 1a4:	00 00       	nop

void USI_Write(char data)
{
	USIDR = data;
	
	for(int i = 0; i < 8; i++)
 1a6:	2f 5f       	subi	r18, 0xFF	; 255
 1a8:	3f 4f       	sbci	r19, 0xFF	; 255
 1aa:	e9 cf       	rjmp	.-46     	; 0x17e <_Z9USI_Writec+0x6>
 1ac:	08 95       	ret

000001ae <main>:
	}
}

int main(void)
{
	DDRB = 0x02; 
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	87 bb       	out	0x17, r24	; 23
	MCUCR |= _BV(ISC00);
 1b2:	85 b7       	in	r24, 0x35	; 53
 1b4:	81 60       	ori	r24, 0x01	; 1
 1b6:	85 bf       	out	0x35, r24	; 53
	IR_cmd remote_cmd;
	remote_cmd.addr = 0x00;
	remote_cmd.cmd = 0x00;

	USI_init();
 1b8:	d8 df       	rcall	.-80     	; 0x16a <_Z8USI_initv>

	sei();
 1ba:	78 94       	sei

	while(1)
	{
		remote_cmd = IR_Recv();
 1bc:	9b df       	rcall	.-202    	; 0xf4 <_Z7IR_Recvv>
 1be:	c9 2f       	mov	r28, r25
		if(remote_cmd.cmd == 0x16) blink();
 1c0:	96 31       	cpi	r25, 0x16	; 22
 1c2:	09 f4       	brne	.+2      	; 0x1c6 <main+0x18>
 1c4:	3d df       	rcall	.-390    	; 0x40 <_Z5blinkv>
		cli();
 1c6:	f8 94       	cli
		USI_Write(remote_cmd.cmd);
 1c8:	8c 2f       	mov	r24, r28
 1ca:	d6 df       	rcall	.-84     	; 0x178 <_Z9USI_Writec>
		sei();
 1cc:	78 94       	sei

	USI_init();

	sei();

	while(1)
 1ce:	f6 cf       	rjmp	.-20     	; 0x1bc <main+0xe>

000001d0 <__vector_1>:
		sei();
	}
}

ISR(INT0_vect)
{
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	8f 93       	push	r24
 1dc:	9f 93       	push	r25
	change = TRUE;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ea:	9f 91       	pop	r25
 1ec:	8f 91       	pop	r24
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <__divmodhi4>:
 1f8:	97 fb       	bst	r25, 7
 1fa:	07 2e       	mov	r0, r23
 1fc:	16 f4       	brtc	.+4      	; 0x202 <__DATA_REGION_LENGTH__+0x2>
 1fe:	00 94       	com	r0
 200:	06 d0       	rcall	.+12     	; 0x20e <__divmodhi4_neg1>
 202:	77 fd       	sbrc	r23, 7
 204:	08 d0       	rcall	.+16     	; 0x216 <__divmodhi4_neg2>
 206:	0b d0       	rcall	.+22     	; 0x21e <__udivmodhi4>
 208:	07 fc       	sbrc	r0, 7
 20a:	05 d0       	rcall	.+10     	; 0x216 <__divmodhi4_neg2>
 20c:	3e f4       	brtc	.+14     	; 0x21c <__divmodhi4_exit>

0000020e <__divmodhi4_neg1>:
 20e:	90 95       	com	r25
 210:	81 95       	neg	r24
 212:	9f 4f       	sbci	r25, 0xFF	; 255
 214:	08 95       	ret

00000216 <__divmodhi4_neg2>:
 216:	70 95       	com	r23
 218:	61 95       	neg	r22
 21a:	7f 4f       	sbci	r23, 0xFF	; 255

0000021c <__divmodhi4_exit>:
 21c:	08 95       	ret

0000021e <__udivmodhi4>:
 21e:	aa 1b       	sub	r26, r26
 220:	bb 1b       	sub	r27, r27
 222:	51 e1       	ldi	r21, 0x11	; 17
 224:	07 c0       	rjmp	.+14     	; 0x234 <__udivmodhi4_ep>

00000226 <__udivmodhi4_loop>:
 226:	aa 1f       	adc	r26, r26
 228:	bb 1f       	adc	r27, r27
 22a:	a6 17       	cp	r26, r22
 22c:	b7 07       	cpc	r27, r23
 22e:	10 f0       	brcs	.+4      	; 0x234 <__udivmodhi4_ep>
 230:	a6 1b       	sub	r26, r22
 232:	b7 0b       	sbc	r27, r23

00000234 <__udivmodhi4_ep>:
 234:	88 1f       	adc	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	5a 95       	dec	r21
 23a:	a9 f7       	brne	.-22     	; 0x226 <__udivmodhi4_loop>
 23c:	80 95       	com	r24
 23e:	90 95       	com	r25
 240:	bc 01       	movw	r22, r24
 242:	cd 01       	movw	r24, r26
 244:	08 95       	ret

00000246 <_exit>:
 246:	f8 94       	cli

00000248 <__stop_program>:
 248:	ff cf       	rjmp	.-2      	; 0x248 <__stop_program>
