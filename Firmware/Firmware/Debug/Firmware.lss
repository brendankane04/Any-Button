
Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000002da  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800062  00800062  00000370  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c2  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000050b  00000000  00000000  00000ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000423  00000000  00000000  00000fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000013f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034f  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015e  00000000  00000000  00001777  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000018d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ea ed       	ldi	r30, 0xDA	; 218
  32:	f2 e0       	ldi	r31, 0x02	; 2
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a2 36       	cpi	r26, 0x62	; 98
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a2 e6       	ldi	r26, 0x62	; 98
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a8 36       	cpi	r26, 0x68	; 104
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	2f d1       	rcall	.+606    	; 0x2b0 <main>
  52:	41 c1       	rjmp	.+642    	; 0x2d6 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <_Z8infraredv>:
uint16_t cti;
uint8_t ir=0x01,ib,bt,custom,data;

void infrared(){

	cti=0;while(~pin & ir){cti++;_delay_us(100);} //Leader(16T) Check
  56:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cti+0x1>
  5a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cti>
  5e:	86 b3       	in	r24, 0x16	; 22
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	80 95       	com	r24
  64:	90 95       	com	r25
  66:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  6a:	30 e0       	ldi	r19, 0x00	; 0
  6c:	82 23       	and	r24, r18
  6e:	93 23       	and	r25, r19
  70:	89 2b       	or	r24, r25
  72:	81 f0       	breq	.+32     	; 0x94 <_Z8infraredv+0x3e>
  74:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cti>
  78:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cti+0x1>
  7c:	01 96       	adiw	r24, 0x01	; 1
  7e:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <cti+0x1>
  82:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <cti>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	8f e8       	ldi	r24, 0x8F	; 143
  88:	91 e0       	ldi	r25, 0x01	; 1
  8a:	01 97       	sbiw	r24, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <_Z8infraredv+0x34>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <_Z8infraredv+0x3a>
  90:	00 00       	nop
  92:	e5 cf       	rjmp	.-54     	; 0x5e <_Z8infraredv+0x8>
	if(cti>70 && cti<100){ //cti:90(16T)
  94:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cti>
  98:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cti+0x1>
  9c:	87 54       	subi	r24, 0x47	; 71
  9e:	91 09       	sbc	r25, r1
  a0:	4d 97       	sbiw	r24, 0x1d	; 29
  a2:	08 f0       	brcs	.+2      	; 0xa6 <_Z8infraredv+0x50>
  a4:	d8 c0       	rjmp	.+432    	; 0x256 <__DATA_REGION_LENGTH__+0x56>

		cti=0;while((pin & ir)&&(cti<55)){cti++;_delay_us(100);} //Blank(8T) Check
  a6:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cti+0x1>
  aa:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cti>
  ae:	96 b3       	in	r25, 0x16	; 22
  b0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b4:	89 23       	and	r24, r25
  b6:	41 f0       	breq	.+16     	; 0xc8 <_Z8infraredv+0x72>
  b8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cti>
  bc:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cti+0x1>
  c0:	c7 97       	sbiw	r24, 0x37	; 55
  c2:	20 f0       	brcs	.+8      	; 0xcc <_Z8infraredv+0x76>
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	03 c0       	rjmp	.+6      	; 0xce <_Z8infraredv+0x78>
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	01 c0       	rjmp	.+2      	; 0xce <_Z8infraredv+0x78>
  cc:	41 e0       	ldi	r20, 0x01	; 1
  ce:	44 23       	and	r20, r20
  d0:	81 f0       	breq	.+32     	; 0xf2 <_Z8infraredv+0x9c>
  d2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cti>
  d6:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cti+0x1>
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <cti+0x1>
  e0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <cti>
  e4:	8f e8       	ldi	r24, 0x8F	; 143
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <_Z8infraredv+0x92>
  ec:	00 c0       	rjmp	.+0      	; 0xee <_Z8infraredv+0x98>
  ee:	00 00       	nop
  f0:	de cf       	rjmp	.-68     	; 0xae <_Z8infraredv+0x58>

		if(cti>35){ //cti:45(8T)
  f2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cti>
  f6:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cti+0x1>
  fa:	84 97       	sbiw	r24, 0x24	; 36
  fc:	08 f4       	brcc	.+2      	; 0x100 <_Z8infraredv+0xaa>
  fe:	ab c0       	rjmp	.+342    	; 0x256 <__DATA_REGION_LENGTH__+0x56>
			for(ib=0;ib<16;ib++){
 100:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <ib>
 104:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <ib>
 108:	80 31       	cpi	r24, 0x10	; 16
 10a:	08 f0       	brcs	.+2      	; 0x10e <_Z8infraredv+0xb8>
 10c:	51 c0       	rjmp	.+162    	; 0x1b0 <_Z8infraredv+0x15a>
				while(~pin & ir);
 10e:	86 b3       	in	r24, 0x16	; 22
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	80 95       	com	r24
 114:	90 95       	com	r25
 116:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	82 23       	and	r24, r18
 11e:	93 23       	and	r25, r19
 120:	89 2b       	or	r24, r25
 122:	a9 f7       	brne	.-22     	; 0x10e <_Z8infraredv+0xb8>
				cti=0;while((pin & ir)&&(cti<20)){cti++;_delay_us(100);}
 124:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cti+0x1>
 128:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cti>
 12c:	96 b3       	in	r25, 0x16	; 22
 12e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 132:	89 23       	and	r24, r25
 134:	41 f0       	breq	.+16     	; 0x146 <_Z8infraredv+0xf0>
 136:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cti>
 13a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cti+0x1>
 13e:	44 97       	sbiw	r24, 0x14	; 20
 140:	20 f0       	brcs	.+8      	; 0x14a <_Z8infraredv+0xf4>
 142:	84 2f       	mov	r24, r20
 144:	03 c0       	rjmp	.+6      	; 0x14c <_Z8infraredv+0xf6>
 146:	84 2f       	mov	r24, r20
 148:	01 c0       	rjmp	.+2      	; 0x14c <_Z8infraredv+0xf6>
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	88 23       	and	r24, r24
 14e:	81 f0       	breq	.+32     	; 0x170 <_Z8infraredv+0x11a>
 150:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cti>
 154:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cti+0x1>
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <cti+0x1>
 15e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <cti>
 162:	8f e8       	ldi	r24, 0x8F	; 143
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <_Z8infraredv+0x110>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <_Z8infraredv+0x116>
 16c:	00 00       	nop
 16e:	de cf       	rjmp	.-68     	; 0x12c <_Z8infraredv+0xd6>
				if(cti>10){bt=1;}else{bt=0;} //cti:16(3T)
 170:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cti>
 174:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cti+0x1>
 178:	0b 97       	sbiw	r24, 0x0b	; 11
 17a:	20 f0       	brcs	.+8      	; 0x184 <_Z8infraredv+0x12e>
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <bt>
 182:	02 c0       	rjmp	.+4      	; 0x188 <_Z8infraredv+0x132>
 184:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <bt>
				data<<=1; //data:Data Code
 188:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__data_end>
 18c:	99 0f       	add	r25, r25
				data|=bt;
 18e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <bt>
 192:	98 2b       	or	r25, r24
 194:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__data_end>
				if(ib==7){custom=data;data=0;} //custom:Custom Code
 198:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <ib>
 19c:	87 30       	cpi	r24, 0x07	; 7
 19e:	21 f4       	brne	.+8      	; 0x1a8 <_Z8infraredv+0x152>
 1a0:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <custom>
 1a4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	if(cti>70 && cti<100){ //cti:90(16T)

		cti=0;while((pin & ir)&&(cti<55)){cti++;_delay_us(100);} //Blank(8T) Check

		if(cti>35){ //cti:45(8T)
			for(ib=0;ib<16;ib++){
 1a8:	8f 5f       	subi	r24, 0xFF	; 255
 1aa:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ib>
 1ae:	aa cf       	rjmp	.-172    	; 0x104 <_Z8infraredv+0xae>
				if(cti>10){bt=1;}else{bt=0;} //cti:16(3T)
				data<<=1; //data:Data Code
				data|=bt;
				if(ib==7){custom=data;data=0;} //custom:Custom Code
			}
			if(custom==0x99){
 1b0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <custom>
 1b4:	89 39       	cpi	r24, 0x99	; 153
 1b6:	09 f0       	breq	.+2      	; 0x1ba <_Z8infraredv+0x164>
 1b8:	4e c0       	rjmp	.+156    	; 0x256 <__DATA_REGION_LENGTH__+0x56>
				if(data==0x01){PORTB|=(1<<1);} //PB1:Momentary
 1ba:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	19 f4       	brne	.+6      	; 0x1c8 <_Z8infraredv+0x172>
 1c2:	88 b3       	in	r24, 0x18	; 24
 1c4:	82 60       	ori	r24, 0x02	; 2
 1c6:	88 bb       	out	0x18, r24	; 24
				if(data==0x02){PORTB|=(1<<2);} //PB2:Momentary
 1c8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1cc:	82 30       	cpi	r24, 0x02	; 2
 1ce:	19 f4       	brne	.+6      	; 0x1d6 <_Z8infraredv+0x180>
 1d0:	88 b3       	in	r24, 0x18	; 24
 1d2:	84 60       	ori	r24, 0x04	; 4
 1d4:	88 bb       	out	0x18, r24	; 24
				if(data==0x03){PORTB^=(1<<3);} //PB3:Alternate
 1d6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1da:	83 30       	cpi	r24, 0x03	; 3
 1dc:	21 f4       	brne	.+8      	; 0x1e6 <_Z8infraredv+0x190>
 1de:	98 b3       	in	r25, 0x18	; 24
 1e0:	88 e0       	ldi	r24, 0x08	; 8
 1e2:	89 27       	eor	r24, r25
 1e4:	88 bb       	out	0x18, r24	; 24
				if(data==0x04){PORTB^=(1<<4);} //PB4:Alternate
 1e6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1ea:	84 30       	cpi	r24, 0x04	; 4
 1ec:	21 f4       	brne	.+8      	; 0x1f6 <_Z8infraredv+0x1a0>
 1ee:	98 b3       	in	r25, 0x18	; 24
 1f0:	80 e1       	ldi	r24, 0x10	; 16
 1f2:	89 27       	eor	r24, r25
 1f4:	88 bb       	out	0x18, r24	; 24

				cti=0;while((pin & ir)&&(cti<10)){cti++;_delay_us(100);}
 1f6:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cti+0x1>
 1fa:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cti>
 1fe:	86 b3       	in	r24, 0x16	; 22
 200:	50 91 60 00 	lds	r21, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 204:	85 23       	and	r24, r21
 206:	41 f0       	breq	.+16     	; 0x218 <__DATA_REGION_LENGTH__+0x18>
 208:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cti>
 20c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cti+0x1>
 210:	0a 97       	sbiw	r24, 0x0a	; 10
 212:	20 f0       	brcs	.+8      	; 0x21c <__DATA_REGION_LENGTH__+0x1c>
 214:	84 2f       	mov	r24, r20
 216:	03 c0       	rjmp	.+6      	; 0x21e <__DATA_REGION_LENGTH__+0x1e>
 218:	84 2f       	mov	r24, r20
 21a:	01 c0       	rjmp	.+2      	; 0x21e <__DATA_REGION_LENGTH__+0x1e>
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	88 23       	and	r24, r24
 220:	81 f0       	breq	.+32     	; 0x242 <__DATA_REGION_LENGTH__+0x42>
 222:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cti>
 226:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cti+0x1>
 22a:	01 96       	adiw	r24, 0x01	; 1
 22c:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <cti+0x1>
 230:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <cti>
 234:	8f e8       	ldi	r24, 0x8F	; 143
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <__DATA_REGION_LENGTH__+0x38>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <__DATA_REGION_LENGTH__+0x3e>
 23e:	00 00       	nop
 240:	de cf       	rjmp	.-68     	; 0x1fe <_Z8infraredv+0x1a8>
				while(~pin & ir); //Stop Bit
 242:	86 b3       	in	r24, 0x16	; 22
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	80 95       	com	r24
 248:	90 95       	com	r25
 24a:	25 2f       	mov	r18, r21
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	82 23       	and	r24, r18
 250:	93 23       	and	r25, r19
 252:	89 2b       	or	r24, r25
 254:	b1 f7       	brne	.-20     	; 0x242 <__DATA_REGION_LENGTH__+0x42>
			}
		}//if(cti>35
		
	}//if(cti>70

	cti=0;
 256:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cti+0x1>
 25a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cti>
	for(;;){ //Blank Check
		cti++;
 25e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cti>
 262:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cti+0x1>
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <cti+0x1>
 26c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <cti>
 270:	8f e8       	ldi	r24, 0x8F	; 143
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <__stack+0x15>
 278:	00 c0       	rjmp	.+0      	; 0x27a <__stack+0x1b>
 27a:	00 00       	nop
		_delay_us(100);
		if(~pin & ir){cti=0;}
 27c:	86 b3       	in	r24, 0x16	; 22
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	80 95       	com	r24
 282:	90 95       	com	r25
 284:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	82 23       	and	r24, r18
 28c:	93 23       	and	r25, r19
 28e:	89 2b       	or	r24, r25
 290:	21 f0       	breq	.+8      	; 0x29a <__stack+0x3b>
 292:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cti+0x1>
 296:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cti>
		if(cti>500){PORTB&=0b11111001;break;}
 29a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cti>
 29e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cti+0x1>
 2a2:	85 3f       	cpi	r24, 0xF5	; 245
 2a4:	91 40       	sbci	r25, 0x01	; 1
 2a6:	d8 f2       	brcs	.-74     	; 0x25e <__DATA_REGION_LENGTH__+0x5e>
 2a8:	88 b3       	in	r24, 0x18	; 24
 2aa:	89 7f       	andi	r24, 0xF9	; 249
 2ac:	88 bb       	out	0x18, r24	; 24
 2ae:	08 95       	ret

000002b0 <main>:
	}
}

int main( void ){

	CLKPR =0b10000000; //Prescaler Change Enable
 2b0:	80 e8       	ldi	r24, 0x80	; 128
 2b2:	86 bd       	out	0x26, r24	; 38
	CLKPR =0b00000000; //Div1(9.6MHz)
 2b4:	16 bc       	out	0x26, r1	; 38

	DDRB  =0b00011110; //PB4-1:LED
 2b6:	8e e1       	ldi	r24, 0x1E	; 30
 2b8:	87 bb       	out	0x17, r24	; 23
	PORTB =0b00000000; //PB0:IR Sensor
 2ba:	18 ba       	out	0x18, r1	; 24

	while(1){

		if(~pin & ir){infrared();}
 2bc:	86 b3       	in	r24, 0x16	; 22
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	80 95       	com	r24
 2c2:	90 95       	com	r25
 2c4:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	82 23       	and	r24, r18
 2cc:	93 23       	and	r25, r19
 2ce:	89 2b       	or	r24, r25
 2d0:	a9 f3       	breq	.-22     	; 0x2bc <main+0xc>
 2d2:	c1 de       	rcall	.-638    	; 0x56 <_Z8infraredv>
 2d4:	f3 cf       	rjmp	.-26     	; 0x2bc <main+0xc>

000002d6 <_exit>:
 2d6:	f8 94       	cli

000002d8 <__stop_program>:
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <__stop_program>
