
Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000154  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000663  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000055d  00000000  00000000  0000085b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002af  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001068  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000382  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000105  00000000  00000000  00001452  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001557  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	58 c0       	rjmp	.+176    	; 0xb4 <__vector_1>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a2 36       	cpi	r26, 0x62	; 98
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	31 d0       	rcall	.+98     	; 0x9e <main>
  3c:	4f c0       	rjmp	.+158    	; 0xdc <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <_Z5blinkv>:
const int delay = 1000;
int change = 0;

void blink()
{
	PORTB |= 0x02;
  40:	88 b3       	in	r24, 0x18	; 24
  42:	82 60       	ori	r24, 0x02	; 2
  44:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  46:	2f e3       	ldi	r18, 0x3F	; 63
  48:	8d e0       	ldi	r24, 0x0D	; 13
  4a:	93 e0       	ldi	r25, 0x03	; 3
  4c:	21 50       	subi	r18, 0x01	; 1
  4e:	80 40       	sbci	r24, 0x00	; 0
  50:	90 40       	sbci	r25, 0x00	; 0
  52:	e1 f7       	brne	.-8      	; 0x4c <_Z5blinkv+0xc>
  54:	00 c0       	rjmp	.+0      	; 0x56 <_Z5blinkv+0x16>
  56:	00 00       	nop
	_delay_ms(delay);
	PORTB &= ~0x02;
  58:	88 b3       	in	r24, 0x18	; 24
  5a:	8d 7f       	andi	r24, 0xFD	; 253
  5c:	88 bb       	out	0x18, r24	; 24
  5e:	08 95       	ret

00000060 <_Z17wait_until_changev>:

//waits until the interrupt pin is triggered and records how long the device waited for a response in 10's of microseconds
int wait_until_change()
{
	int count = 0;
	GIMSK |= _BV(INT0);
  60:	8b b7       	in	r24, 0x3b	; 59
  62:	80 64       	ori	r24, 0x40	; 64
  64:	8b bf       	out	0x3b, r24	; 59
}

//waits until the interrupt pin is triggered and records how long the device waited for a response in 10's of microseconds
int wait_until_change()
{
	int count = 0;
  66:	80 e0       	ldi	r24, 0x00	; 0
  68:	90 e0       	ldi	r25, 0x00	; 0
	GIMSK |= _BV(INT0);
	while(!change)
  6a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  6e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  72:	23 2b       	or	r18, r19
  74:	61 f4       	brne	.+24     	; 0x8e <_Z17wait_until_changev+0x2e>
	{
		//Increment & reset when it's been increasing for too long
		count++;
  76:	01 96       	adiw	r24, 0x01	; 1
		if(count == 1500) count = 0;
  78:	8c 3d       	cpi	r24, 0xDC	; 220
  7a:	25 e0       	ldi	r18, 0x05	; 5
  7c:	92 07       	cpc	r25, r18
  7e:	11 f4       	brne	.+4      	; 0x84 <_Z17wait_until_changev+0x24>
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	23 e0       	ldi	r18, 0x03	; 3
  86:	2a 95       	dec	r18
  88:	f1 f7       	brne	.-4      	; 0x86 <_Z17wait_until_changev+0x26>
  8a:	00 00       	nop
  8c:	ee cf       	rjmp	.-36     	; 0x6a <_Z17wait_until_changev+0xa>

		_delay_us(10);
	}
	change = FALSE;
  8e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  92:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	GIMSK &= ~_BV(INT0);
  96:	2b b7       	in	r18, 0x3b	; 59
  98:	2f 7b       	andi	r18, 0xBF	; 191
  9a:	2b bf       	out	0x3b, r18	; 59
	return count;
}
  9c:	08 95       	ret

0000009e <main>:



int main(void)
{
	DDRB = 0x02; 
  9e:	82 e0       	ldi	r24, 0x02	; 2
  a0:	87 bb       	out	0x17, r24	; 23
	MCUCR |= _BV(ISC00);
  a2:	85 b7       	in	r24, 0x35	; 53
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	85 bf       	out	0x35, r24	; 53
	int length = 0;
	sei();
  a8:	78 94       	sei

	while(1)
	{
		length = wait_until_change();
  aa:	da df       	rcall	.-76     	; 0x60 <_Z17wait_until_changev>
		if(length > 10) blink();
  ac:	0b 97       	sbiw	r24, 0x0b	; 11
  ae:	ec f3       	brlt	.-6      	; 0xaa <main+0xc>
  b0:	c7 df       	rcall	.-114    	; 0x40 <_Z5blinkv>
  b2:	fb cf       	rjmp	.-10     	; 0xaa <main+0xc>

000000b4 <__vector_1>:
	}
}

ISR(INT0_vect)
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
	change = TRUE;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  ce:	9f 91       	pop	r25
  d0:	8f 91       	pop	r24
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
