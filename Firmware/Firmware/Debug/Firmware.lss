
Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000136  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007ef  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005cc  00000000  00000000  00000a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cf  00000000  00000000  0000102b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  000013fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000406  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000268  00000000  00000000  000018ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001b36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	5c c0       	rjmp	.+184    	; 0xbc <__vector_1>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a2 36       	cpi	r26, 0x62	; 98
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	35 d0       	rcall	.+106    	; 0xa6 <main>
  3c:	7a c0       	rjmp	.+244    	; 0x132 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <_Z5blinkv>:
		output.cmd = 0;
		return output;
	}
	
	return output;
}
  40:	88 b3       	in	r24, 0x18	; 24
  42:	82 60       	ori	r24, 0x02	; 2
  44:	88 bb       	out	0x18, r24	; 24
  46:	2f e3       	ldi	r18, 0x3F	; 63
  48:	8d e0       	ldi	r24, 0x0D	; 13
  4a:	93 e0       	ldi	r25, 0x03	; 3
  4c:	21 50       	subi	r18, 0x01	; 1
  4e:	80 40       	sbci	r24, 0x00	; 0
  50:	90 40       	sbci	r25, 0x00	; 0
  52:	e1 f7       	brne	.-8      	; 0x4c <_Z5blinkv+0xc>
  54:	00 c0       	rjmp	.+0      	; 0x56 <_Z5blinkv+0x16>
  56:	00 00       	nop
  58:	88 b3       	in	r24, 0x18	; 24
  5a:	8d 7f       	andi	r24, 0xFD	; 253
  5c:	88 bb       	out	0x18, r24	; 24
  5e:	08 95       	ret

00000060 <_Z17wait_until_changev>:
  60:	8b b7       	in	r24, 0x3b	; 59
  62:	80 64       	ori	r24, 0x40	; 64
  64:	8b bf       	out	0x3b, r24	; 59
  66:	80 e0       	ldi	r24, 0x00	; 0
  68:	90 e0       	ldi	r25, 0x00	; 0
  6a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  6e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  72:	23 2b       	or	r18, r19
  74:	61 f4       	brne	.+24     	; 0x8e <_Z17wait_until_changev+0x2e>
  76:	01 96       	adiw	r24, 0x01	; 1
  78:	8c 3d       	cpi	r24, 0xDC	; 220
  7a:	25 e0       	ldi	r18, 0x05	; 5
  7c:	92 07       	cpc	r25, r18
  7e:	11 f4       	brne	.+4      	; 0x84 <_Z17wait_until_changev+0x24>
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	23 e0       	ldi	r18, 0x03	; 3
  86:	2a 95       	dec	r18
  88:	f1 f7       	brne	.-4      	; 0x86 <_Z17wait_until_changev+0x26>
  8a:	00 00       	nop
  8c:	ee cf       	rjmp	.-36     	; 0x6a <_Z17wait_until_changev+0xa>
  8e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  92:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	2b b7       	in	r18, 0x3b	; 59
  98:	2f 7b       	andi	r18, 0xBF	; 191
  9a:	2b bf       	out	0x3b, r18	; 59
  9c:	6a e0       	ldi	r22, 0x0A	; 10
  9e:	70 e0       	ldi	r23, 0x00	; 0
  a0:	21 d0       	rcall	.+66     	; 0xe4 <__divmodhi4>
  a2:	cb 01       	movw	r24, r22
  a4:	08 95       	ret

000000a6 <main>:

int main(void)
{
	DDRB = 0x02; 
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	87 bb       	out	0x17, r24	; 23
	MCUCR |= _BV(ISC00);
  aa:	85 b7       	in	r24, 0x35	; 53
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	85 bf       	out	0x35, r24	; 53
	int length = 0;
	sei();
  b0:	78 94       	sei

	while(1)
	{
		length = wait_until_change();
  b2:	d6 df       	rcall	.-84     	; 0x60 <_Z17wait_until_changev>
		if(length > 10) blink();
  b4:	0b 97       	sbiw	r24, 0x0b	; 11
  b6:	ec f3       	brlt	.-6      	; 0xb2 <main+0xc>
  b8:	c3 df       	rcall	.-122    	; 0x40 <_Z5blinkv>
  ba:	fb cf       	rjmp	.-10     	; 0xb2 <main+0xc>

000000bc <__vector_1>:
	}
}

ISR(INT0_vect)
{
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
	change = TRUE;
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <__divmodhi4>:
  e4:	97 fb       	bst	r25, 7
  e6:	07 2e       	mov	r0, r23
  e8:	16 f4       	brtc	.+4      	; 0xee <__divmodhi4+0xa>
  ea:	00 94       	com	r0
  ec:	06 d0       	rcall	.+12     	; 0xfa <__divmodhi4_neg1>
  ee:	77 fd       	sbrc	r23, 7
  f0:	08 d0       	rcall	.+16     	; 0x102 <__divmodhi4_neg2>
  f2:	0b d0       	rcall	.+22     	; 0x10a <__udivmodhi4>
  f4:	07 fc       	sbrc	r0, 7
  f6:	05 d0       	rcall	.+10     	; 0x102 <__divmodhi4_neg2>
  f8:	3e f4       	brtc	.+14     	; 0x108 <__divmodhi4_exit>

000000fa <__divmodhi4_neg1>:
  fa:	90 95       	com	r25
  fc:	81 95       	neg	r24
  fe:	9f 4f       	sbci	r25, 0xFF	; 255
 100:	08 95       	ret

00000102 <__divmodhi4_neg2>:
 102:	70 95       	com	r23
 104:	61 95       	neg	r22
 106:	7f 4f       	sbci	r23, 0xFF	; 255

00000108 <__divmodhi4_exit>:
 108:	08 95       	ret

0000010a <__udivmodhi4>:
 10a:	aa 1b       	sub	r26, r26
 10c:	bb 1b       	sub	r27, r27
 10e:	51 e1       	ldi	r21, 0x11	; 17
 110:	07 c0       	rjmp	.+14     	; 0x120 <__udivmodhi4_ep>

00000112 <__udivmodhi4_loop>:
 112:	aa 1f       	adc	r26, r26
 114:	bb 1f       	adc	r27, r27
 116:	a6 17       	cp	r26, r22
 118:	b7 07       	cpc	r27, r23
 11a:	10 f0       	brcs	.+4      	; 0x120 <__udivmodhi4_ep>
 11c:	a6 1b       	sub	r26, r22
 11e:	b7 0b       	sbc	r27, r23

00000120 <__udivmodhi4_ep>:
 120:	88 1f       	adc	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	5a 95       	dec	r21
 126:	a9 f7       	brne	.-22     	; 0x112 <__udivmodhi4_loop>
 128:	80 95       	com	r24
 12a:	90 95       	com	r25
 12c:	bc 01       	movw	r22, r24
 12e:	cd 01       	movw	r24, r26
 130:	08 95       	ret

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
